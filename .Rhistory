load_all()
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K31_pruned",label_col_query = "predicted_K31_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=4,overlay_alpha=0.5)
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K31_pruned",label_col_query = "predicted_K31_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=4,overlay_alpha=0.5)
load_all()
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K31_pruned",label_col_query = "predicted_K31_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=4,overlay_alpha=0.5)
overview_clustering[overview_clustering$clustering_1=="Slc17a6.Fezf1.Cd40.Gpr149.Fgf10",]
clustering_1_filter = c("Slc17a6.Fezf1.Cd40.Gpr149.Fgf10")
clustering_2_filter = overview_clustering$clustering_2[overview_clustering$clustering_1=="Slc17a6.Fezf1.Cd40.Gpr149.Fgf10"]
plot_sankey_comparison(overview_clustering,clustering_1_filter = clustering_1_filter,clustering_2_filter = clustering_2_filter,text_size=10)
cid=unique(neuron_map_seurat@meta.data$K169_pruned[neuron_map_seurat@meta.data$K169_named == "Slc17a6.Fezf1.Cd40.Gpr149.Fgf10"])
find_children = function(nodes,edges){
current_children = edges$to[edges$from %in% nodes]
#print(paste0(current_children,collapse = "|"))
if(length(current_children)>0){
all_children = c(current_children,find_children(current_children,edges))
}else{
all_children = current_children
}
return(all_children)
}
find_children(nodes=cid,neuron_map_seurat@misc$mrtree_edgelist[,1:2])
overview_clustering_k329 = compare_clustering(query_seura_object,"predicted_K329_pruned","seurat_clusters",min_cells = 10,min_pct = 0.1,return_data=TRUE)
clustering_1_filter = c("K329-89","K329-150","K329-250","K329-229")
clustering_2_filter = overview_clustering$clustering_2[overview_clustering$clustering_1 %in% clustering_1_filter]
plot_sankey_comparison(overview_clustering_k329,clustering_1_filter = clustering_1_filter,clustering_2_filter = clustering_2_filter,text_size=20)
clustering_1_filter = c("Slc17a6.Fezf1.Cd40.Gpr149.Fgf10")
clustering_2_filter = overview_clustering$clustering_2[overview_clustering$clustering_1=="Slc17a6.Fezf1.Cd40.Gpr149.Fgf10"]
plot_sankey_comparison(overview_clustering,clustering_1_filter = clustering_1_filter,clustering_2_filter = clustering_2_filter,text_size=10)
clustering_2_filter = overview_clustering$clustering_2[overview_clustering$clustering_1=="Slc17a6.Fezf1.Cd40.Gpr149.Fgf10"]
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.2)
clustering_2_filter = overview_clustering$clustering_2[overview_clustering$clustering_1=="Slc17a6.Fezf1.Cd40.Gpr149.Fgf10"]
cellsh = query_snseq_neurons@meta.data$Cell_ID[query_snseq_neurons@meta.data$seurat_clusters %in% clustering_2_filter]
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.2)
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)+NoLegend+NoAxes()
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)+NoLegend()+NoAxes()
flagged_clusters$clustering_2_flagged
overview_clustering[overview_clustering$clustering_2=="32",]
clustering_2_filter = c("32")
plot_sankey_comparison(overview_clustering,clustering_1_filter = NULL,clustering_2_filter = clustering_2_filter,text_size=10)
clustering_2_filter = c("32","40")
clustering_1_filter = overview_clustering$clustering_1[overview_clustering$clustering_2 %in% clustering_2_filter]
plot_sankey_comparison(overview_clustering,clustering_1_filter = clustering_1_filter,clustering_2_filter = clustering_2_filter,text_size=20)
clustering_2_filter = c("32","40")
cellsh = query_snseq_neurons@meta.data$Cell_ID[query_snseq_neurons@meta.data$seurat_clusters %in% clustering_2_filter]
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,cells.highlight = cellsh,sizes.highlight = 0.15)+NoLegend()+NoAxes()
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
View(markers_welch)
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
markers_welch$specificity = (markers_welch$pct.1 / markers_welch$pct.2) * markers_welch$avg_logFC
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
markers_welch$specificity = (markers_welch$pct.1 / markers_welch$pct.2) * markers_welch$avg_log2FC
markers_welch$specificity[markers_welch$specificity> 100] = 100
markers_welch = markers_welch %>% dplyr::select(cluster,gene,specificity,avg_logFC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.001) %>%
dplyr::arrange(desc(specificity))
markers_welch = markers_welch %>% dplyr::select(cluster,gene,specificity,avg_log2FC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.001) %>%
dplyr::arrange(desc(specificity))
View(markers_welch)
welch_seurat_downsampled@misc$seurat_clusters_markers = markers_welch
## add additional info
welch_seurat_downsampled@misc$object_info = "Dataset Macosko Lab, GSE126836 This is a standard processing of the BNST dataset (neurons only) associated with the LIGER paper. Sn-seq using 10x v3"
welch_seurat_downsampled@misc$object_link = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126836"
## save
saveRDS(welch_seurat_downsampled,paste0(welch_folder_static,"welch_BNST_downsampled_141021.rds"))
paste0(welch_folder_static,"welch_BNST_downsampled_141021.rds")
path_to_maggies_data = "/beegfs/v0/bruening_group/CCG/2019-04-jiang-singlecell-rnaseq/cellranger/SID100757/outs/filtered_feature_bc_matrix/"
seurat_maggie_pmch = Seurat::Read10X(path_to_maggies_data)
seurat_maggie_pmch = CreateSeuratObject(seurat_maggie_pmch,project = "maggie_pmch")
seurat_maggie_pmch
# update metadata
seurat_maggie_pmch_metadata = seurat_maggie_pmch@meta.data  %>% dplyr::mutate(Cell_ID = rownames(seurat_maggie_pmch@meta.data ))%>%
dplyr::select(Cell_ID,Sample_ID = orig.ident,nFeature_RNA,nCount_RNA )
seurat_maggie_pmch_metadata$Cell_ID = paste0(seurat_maggie_pmch_metadata$Cell_ID,"_",seurat_maggie_pmch_metadata$Sample_ID)
seurat_maggie_pmch_metadata$Donor_ID = seurat_maggie_pmch_metadata$Sample_ID
seurat_maggie_pmch_metadata$Sex = NA
seurat_maggie_pmch_metadata$Age = "P126"
seurat_maggie_pmch_metadata$Strain = "MCH-cre;ZsGreen"
seurat_maggie_pmch_metadata$Technology = "10x v2"
seurat_maggie_pmch_metadata$Author_Class = "Neuron"
seurat_maggie_pmch_metadata$Author_CellType = NA
seurat_maggie_pmch_metadata$Diet = "Normal"
rownames(seurat_maggie_pmch_metadata)=seurat_maggie_pmch_metadata$Cell_ID
seurat_maggie_pmch@meta.data=seurat_maggie_pmch_metadata
# update column names of matrix
seurat_maggie_pmch_counts = seurat_maggie_pmch@assays$RNA@counts
colnames(seurat_maggie_pmch_counts) = seurat_maggie_pmch_metadata$Cell_ID
seurat_maggie_pmch = CreateSeuratObject(counts = seurat_maggie_pmch_counts, meta.data = seurat_maggie_pmch_metadata,project = "maggie_pmch")
# check mt-
seurat_maggie_pmch@meta.data$percent.mt = as.numeric(PercentageFeatureSet(seurat_maggie_pmch, pattern = "^mt-")[,1])
# mito
ggplot(seurat_maggie_pmch@meta.data,aes(x = percent.mt,color=Sample_ID))+geom_density()+geom_vline( xintercept = 10)# log2(1000) = 9.965
# QC
# min 1000 UMI will throw away quite a bit of the data... such is life
ggplot(seurat_maggie_pmch@meta.data,aes(x = log2(nCount_RNA),color=Sample_ID))+geom_density()+geom_vline( xintercept = 9.965784)# log2(1000) = 9.965
# remove cells with mt > 10 %
seurat_maggie_pmch = subset(seurat_maggie_pmch, subset = percent.mt < 10)
# remove  some low count cells
seurat_maggie_pmch = subset(seurat_maggie_pmch, subset = nCount_RNA > 1000)
# some high count cells
seurat_maggie_pmch = subset(seurat_maggie_pmch, subset = nCount_RNA < 20000)
seurat_maggie_pmch
# add xist as as sex score marker and use some per sample summary stats to ignore outlier expression
xist_expr = FetchData(seurat_maggie_pmch,vars = "Xist")$Xist
xist_expr[xist_expr>0] = 1
seurat_maggie_pmch@meta.data$inferred_sex = "M"
seurat_maggie_pmch@meta.data$inferred_sex[xist_expr>0] = "F"
table(seurat_maggie_pmch@meta.data$inferred_sex)
## normalize and cell cycle
# add simple Seurat cellcycle scoring
s.genes <- sapply(sapply(cc.genes$s.genes,tolower),stringr::str_to_title)
g2m.genes <- sapply(sapply(cc.genes$g2m.genes,tolower),stringr::str_to_title)
seurat_maggie_pmch <- NormalizeData(object = seurat_maggie_pmch, verbose = F,normalization.method = "LogNormalize",scale.factor = 10000)
seurat_maggie_pmch <- CellCycleScoring(seurat_maggie_pmch, s.features = s.genes, g2m.features = g2m.genes, set.ident = FALSE)
##########
### some tests
##########
source("/beegfs/scratch/bruening_scratch/lsteuernagel/projects/global_helper_functions.R")
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch,nfeatures_vst = 500,npcs_PCA = 30,seed = 123)
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch_quick,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 500,clean_hvg = TRUE,
npcs_PCA = 30,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
##########
### some tests
##########
source("/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scHarmonize/processing/processing functions.R")
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch_quick,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 500,clean_hvg = TRUE,
npcs_PCA = 30,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
FeaturePlot(seurat_maggie_pmch_quick,"Caln1")
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch_quick,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 1000,clean_hvg = TRUE,
npcs_PCA = 50,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
FeaturePlot(seurat_maggie_pmch_quick,"Caln1")
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch_quick,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 500,clean_hvg = TRUE,
npcs_PCA = 20,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
FeaturePlot(seurat_maggie_pmch_quick,"Caln1")
FeaturePlot(seurat_maggie_pmch_quick,"Pmch")
seurat_maggie_pmch_quick = seurat_recipe(seurat_maggie_pmch_quick,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 500,clean_hvg = TRUE,
npcs_PCA = 30,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
FeaturePlot(seurat_maggie_pmch_quick,"Pmch")
DimPlot(seurat_maggie_pmch_quick,group.by = "seurat_clusters")
DimPlot(seurat_maggie_pmch_quick,group.by = "Sample_ID")
maggie_path_static = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/maggie_pmch/"
message("Export results")
markers_pmch = FindAllMarkers(seurat_maggie_pmch_quick,assay = "RNA",logfc.threshold = 0.2,min.pct = 0.1,min.diff.pct = 0.05,only.pos = TRUE,random.seed = 12345,base = 2)
markers_pmch$gene = rownames(markers_pmch)
markers_pmch$specificity = (markers_pmch$pct.1 / markers_pmch$pct.2) * markers_pmch$avg_logFC
markers_pmch$gene = rownames(markers_pmch)
markers_pmch$specificity = (markers_pmch$pct.1 / markers_pmch$pct.2) * markers_pmch$avg_log2FC
markers_pmch$specificity[markers_pmch$specificity> 100] = 100
markers_pmch = markers_pmch %>% dplyr::select(cluster,gene,specificity,avg_logFC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.01) %>%
dplyr::arrange(desc(specificity))
markers_pmch = markers_pmch %>% dplyr::select(cluster,gene,specificity,avg_log2FC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.01) %>%
dplyr::arrange(desc(specificity))
View(markers_pmch)
seurat_maggie_pmch_quick@misc$seurat_clusters_markers = markers_pmch
saveRDS(seurat_maggie_pmch_quick,paste0(maggie_path_static,"pmch_maggie_141021.rds"))
print(paste0(maggie_path_static,"pmch_maggie_141021.rds"))
seurat_maggie_pmch_quick
seurat_maggie_pmch_quick@misc$object_info = "Pmch Dataset from Maggie. This is a standard re-processing of the data from SID100757 (Not Paul's original analysis)"
seurat_maggie_pmch_quick@misc$object_link = "https://github.sf.mpg.de/bruening-lab/2019-11-maggie-single-cell-rnaseq"
seurat_maggie_pmch_quick@misc$object_preferences = list(selected_col = "seurat_clusters")
seurat_maggie_pmch_quick@misc$seurat_clusters_markers = markers_pmch
saveRDS(seurat_maggie_pmch_quick,paste0(maggie_path_static,"pmch_maggie_141021.rds"))
print(paste0(maggie_path_static,"pmch_maggie_141021.rds"))
seurat_maggie_pmch_quick@misc$object_preferences = list(selected_gene = "Pmch", selected_col = "seurat_clusters")
seurat_maggie_pmch_quick@misc$seurat_clusters_markers = markers_pmch
saveRDS(seurat_maggie_pmch_quick,paste0(maggie_path_static,"pmch_maggie_141021.rds"))
## this gets all tanycytes (Col23a1+)
marta_tanycyte_positive = data.table::fread("/beegfs/scratch/bruening_scratch/lsteuernagel/data/paul_data/2019-11-marta-single-cell-rnaseq/inst/extdata/Tanycytes all MPK.csv",data.table=F)
# i am using the raw cellranger UMI counts for the merge
# read cellranger files with SID  into seurat
read_files_function = function(path,name=""){
print(path)
mat = Seurat::Read10X(data.dir = path)
id = gsub("/","",str_extract(string =path, pattern = "/SID[0-9]+"))
print(id)
SampleName = paste0(name,"_",id)
colnames(mat) = paste0(colnames(mat), "_", SampleName,sep = "") # return mat if you don't want a Seurat object
seurat_o = CreateSeuratObject(counts = mat, project =SampleName, min.cells = 1, min.features = 100)
return(seurat_o)
}
# input path
marta_path = "/beegfs/v0/bruening_group/CCG/2019-11-jiang-single-cell-rnaseq/cellranger/SID108522/outs/filtered_feature_bc_matrix/"
#read all files into a list of seurat objects
seurat_marta = read_files_function(marta_path,"marta_tanycytes")
### metadata
tmp_meta = seurat_marta@meta.data
tmp_meta$Cell_ID = rownames(tmp_meta)
# make annotation for brain map
tmp_meta$Sample_ID = tmp_meta$orig.ident
tmp_meta$Donor_ID =tmp_meta$Sample_ID
tmp_meta$Dataset = "Marta_tanycytes"
tmp_meta$Tissue = "Hypothalamus"
tmp_meta$Technology = "10x v2"
tmp_meta$Diet ="Normal"
tmp_meta$Sex = "U"
tmp_meta$Subregion = "Mediobasal hypothalamus"
tmp_meta$Pooled  = "Yes"
tmp_meta$Author_Class = "Tanycytes"
tmp_meta$Author_CellType = NA
tmp_meta$Batch_ID = "marta_batch_1"
tmp_meta$Age = "P84"
rownames(tmp_meta) = tmp_meta$Cell_ID
seurat_marta@meta.data = tmp_meta
# input path
marta_path = "/beegfs/v0/bruening_group/CCG/2019-11-jiang-single-cell-rnaseq/cellranger/SID108522/outs/filtered_feature_bc_matrix/"
#read all files into a list of seurat objects
seurat_marta = read_files_function(marta_path,"marta_tanycytes")
### metadata
tmp_meta = seurat_marta@meta.data
tmp_meta$Cell_ID = rownames(tmp_meta)
# make annotation for brain map
tmp_meta$Sample_ID = tmp_meta$orig.ident
tmp_meta$Donor_ID =tmp_meta$Sample_ID
tmp_meta$Dataset = "Marta_tanycytes"
tmp_meta$Tissue = "Hypothalamus"
tmp_meta$Technology = "10x v2"
# tmp_meta$Diet ="Normal"
# tmp_meta$Sex = "U"
tmp_meta$Subregion = "Mediobasal hypothalamus"
tmp_meta$Pooled  = "Yes"
tmp_meta$Author_Class = "Tanycytes"
#tmp_meta$Author_CellType = NA
#tmp_meta$Batch_ID = "marta_batch_1"
tmp_meta$Age = "P84"
rownames(tmp_meta) = tmp_meta$Cell_ID
seurat_marta@meta.data = tmp_meta
View(marta_tanycyte_positive)
##
# subset
tany_cells = paste0(marta_tanycyte_positive$Barcode[marta_tanycyte_positive$Tanycytes=="Col23a1 pos tany"],"_marta_tanycytes_SID108522")
seurat_marta=subset(seurat_marta,cells = tany_cells)
### QC
# check mt-
seurat_marta@meta.data$percent.mt = as.numeric(PercentageFeatureSet(seurat_marta, pattern = "^mt-")[,1])
# mito
ggplot(seurat_marta@meta.data,aes(x = percent.mt,color=Sample_ID))+geom_density()+geom_vline( xintercept = 10)# log2(1000) = 9.965
# QC
# min 1000 UMI will throw away quite a bit of the data... such is life
ggplot(seurat_marta@meta.data,aes(x = log2(nCount_RNA),color=Sample_ID))+geom_density()+geom_vline( xintercept = 9.965784)# log2(1000) = 9.965
# remove cells with mt > 10 %
seurat_marta = subset(seurat_marta, subset = percent.mt < 10)
# remove  some low count cells
seurat_marta = subset(seurat_marta, subset = nCount_RNA > 1000)
# some high count cells
seurat_marta = subset(seurat_marta, subset = nCount_RNA < 20000) # keep a few more
seurat_marta
##########
### prcoess
##########
source("/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scHarmonize/processing/processing functions.R")
seurat_marta = seurat_recipe(seurat_marta,normalize_data = TRUE,assay = "RNA",nfeatures_vst = 700,clean_hvg = TRUE,
npcs_PCA = 30,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 1)
FeaturePlot(seurat_marta,"Dio2")
DimPlot(seurat_marta,group.by = "seurat_clusters")
DimPlot(seurat_marta,group.by = "Sample_ID")
Idents(seurat_marta) <- "seurat_clusters"
markers_tany = FindAllMarkers(seurat_marta,assay = "RNA",logfc.threshold = 0.2,min.pct = 0.1,min.diff.pct = 0.05,only.pos = TRUE,random.seed = 12345,base = 2)
View(markers_tany)
marta_path_static = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/in_house_scseq/marta_tany/"
message("Export results")
# update
seurat_marta@misc$object_info = "Tanycyte Dataset from Marta This is a standard re-processing of the data from SID108522 filtered for 'Col23a1 pos tany' cells (Not Paul's original analysis)"
seurat_marta@misc$object_link = "https://github.sf.mpg.de/bruening-lab/2019-11-marta-single-cell-rnaseq"
seurat_marta@misc$object_preferences = list(selected_gene = "Dio2", selected_col = "seurat_clusters")
# 'seurat_clusters_markers' requires a column named either 'seurat_clusters' or 'cluster' to match the metadata, the table name also matters (grep with metadatacolumns in tablename(s))
seurat_marta@misc$seurat_clusters_markers = markers_tany
#save
saveRDS(seurat_marta,paste0(marta_path_static,"tanycytes_marta_141021.rds"))
print(paste0(marta_path_static,"tanycytes_marta_141021.rds"))
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K31_pruned",label_col_query = "predicted_K31_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=4,overlay_alpha=0.5)
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K31_pruned",label_col_query = "predicted_K31_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=4,overlay_alpha=0.5)
FeaturePlot(query_snseq_neurons,features = "prediction_probability")
DimPlot(query_snseq_neurons,group.by = "predicted",reduction = "umap_scvi")+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,group.by = "predicted",reduction = "umap_scvi",label = TRUE)+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,group.by = "predicted",reduction = "umap_scvi",label = TRUE,label.size = 3)+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,group.by = "predicted",reduction = "umap_scvi",label = TRUE,label.size = 2-5)+NoLegend()+NoAxes()
DimPlot(query_snseq_neurons,group.by = "predicted",reduction = "umap_scvi",label = TRUE,label.size = 2.5)+NoLegend()+NoAxes()
FeaturePlot(query_snseq_neurons,features = "prediction_probability")
FeaturePlot(query_snseq_neurons,features = "prediction_entropy")
FeaturePlot(query_snseq_neurons,features = "prediction_probability")
query_snseq_neurons = propagate_labels_prob(query_seurat_object = query_snseq_neurons,
reference_seurat_object = neuron_map_seurat,
label_col = "K169_pruned",k.param = 30,add_to_seurat = TRUE,add_entropy = TRUE)
a1 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K159_pruned) %>% dplyr::count()
a1 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned) %>% dplyr::count()
View(a1)
a1 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned) %>% dplyr::count() %>% dplyr::filter(n>3)
a1 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned,seurat_clusters) %>% dplyr::count() %>% dplyr::filter(n>3)
View(a1)
p1=DimPlot(query_snseq_neurons,group.by = "predicted_K169_pruned")+ggtitle("cosine + majority")
p2=DimPlot(query_snseq_neurons,group.by = "predicted")+ggtitle("euclidean + probability")
cowplot::plot_grid(p1,p2)
p1=DimPlot(query_snseq_neurons,group.by = "predicted_K169_pruned")+ggtitle("cosine + majority")+NoLegend()
p2=DimPlot(query_snseq_neurons,group.by = "predicted")+ggtitle("euclidean + probability")+NoLegend()
cowplot::plot_grid(p1,p2)
welch_seurat_downsampled
welch_seurat_downsampled@assays$RNA@data["Trh2",]
welch_seurat_downsampled@assays$RNA@data["Th1",]
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
View(markers_welch)
welch_seurat@assays$RNA@data["Trh2",]
a1=data.frame(gene = rownames(welch_seurat@assays$RNA@data))
View(a1)
View(markers_tany)
View(markers_welch)
View(markers_tany)
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
View(markers_welch)
?Seurat::FindAllMarkers
?Seurat::FindMarkers
load_all()
document()
query_snseq_neurons = propagate_labels_prob(query_seurat_object = query_snseq_neurons,
reference_seurat_object = neuron_map_seurat,
label_col = "K169_pruned",annoy.metric = "cosine",apply_gaussian = FALSE,
k.param = 30,add_to_seurat = TRUE,add_entropy = TRUE)
a2 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned,seurat_clusters) %>% dplyr::count() %>% dplyr::filter(n>3)
View(a2)
View(a1)
comp2 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned,seurat_clusters) %>% dplyr::count() %>% dplyr::filter(n>3)
View(comp2)
View(comp2)
comp2 = query_snseq_neurons@meta.data %>% dplyr::group_by(predicted,predicted_K169_pruned) %>% dplyr::count() %>% dplyr::filter(n>3)
View(comp2)
FeaturePlot(query_snseq_neurons,"norm")
FeaturePlot(query_snseq_neurons,features = "prediction_probability")
FeaturePlot(query_snseq_neurons,features = "prediction_entropy")
query_snseq_neurons$prediction_entropy = 1 - query_snseq_neurons$prediction_entropy
FeaturePlot(query_snseq_neurons,features = "prediction_entropy")
FeaturePlot(query_snseq_neurons,features = "prediction_probability")
FeaturePlot(query_snseq_neurons,features = "prediction_probability")+NoAxes()
FeaturePlot(neuron_map_seurat,"norm")
FeaturePlot(query_snseq_neurons,"norm")
colnames(query_snseq_neurons@meta.data)
FeaturePlot(hippocampus_bakulski_seurat,"norm_hc")
hist(hippocampus_bakulski_seurat@meta.data$norm_hc,xlim = c(0.5,3))
hist(mean_between_distance_bakulski,xlim = c(2,7))
FeaturePlot(hippocampus_bakulski_seurat,"mean_between_distance")
distances_of_ref_neighbors = fast_cosine(as.matrix(latent_space[idx_of_neighbor,]))
#Convert to cosine dissimilarity matrix (distance matrix).
#https://stats.stackexchange.com/questions/31565/compute-a-cosine-dissimilarity-matrix-in-r
fast_cosine = function(mat){
sim <- mat / sqrt(rowSums(mat * mat)) # normalize by sum of each row (vector)
sim <- sim %*% t(sim) #
dissim <- 1 - sim
return(dissim)
}
distances_of_ref_neighbors = fast_cosine(as.matrix(latent_space[idx_of_neighbor,]))
View(distances_of_ref_neighbors)
1+1
?dist
load_all()
query_snseq_neurons = avg_neighbor_distances(query_seurat_object = query_snseq_neurons,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "",distance.metric = "cosine")
query_snseq_neurons = avg_neighbor_distances(query_seurat_object = query_snseq_neurons,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = "cosine")
FeaturePlot(query_snseq_neurons,features = "avg_neighbor_distance")
neuron_map_seurat = avg_neighbor_distances(query_seurat_object = neuron_map_seurat,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = "cosine")
reference_seurat_object@neighbors = Seurat::FindNeighbors(reference_seurat_object@reductions[["scvi"]]@cell.embeddings,k.param = 30, return.neighbor =TRUE,annoy.metric="cosine")
?FindNeighbors
#reference_seurat_object@neighbors = Seurat::FindNeighbors(reference_seurat_object@reductions[["scvi"]]@cell.embeddings,k.param = 30, return.neighbor =TRUE,annoy.metric="cosine")
reference_seurat_object = Seurat::FindNeighbors(reference_seurat_object,reduction="scvi",k.param = 30, return.neighbor =TRUE,annoy.metric="cosine",graph.name="ref_nn")
reference_seurat_object = avg_neighbor_distances(query_seurat_object = reference_seurat_object,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "ref_nn",distance.metric = "cosine")
FeaturePlot(reference_seurat_object,features = "avg_neighbor_distance")
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
### mapping qc
hippocampus_bakulski_seurat = avg_neighbor_distances(query_seurat_object = hippocampus_bakulski_seurat,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = "cosine")
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
FeaturePlot(hippocampus_bakulski_seurat,features = "avg_neighbor_distance")
distance.metric = "euclidean"
## on reference
reference_seurat_object = Seurat::FindNeighbors(reference_seurat_object,reduction="scvi",k.param = 30, return.neighbor =TRUE,annoy.metric=distance.metric,graph.name="ref_nn")
reference_seurat_object = avg_neighbor_distances(query_seurat_object = reference_seurat_object,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "ref_nn",distance.metric = distance.metric)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
FeaturePlot(reference_seurat_object,features = "avg_neighbor_distance")
## on sn seq
query_snseq_neurons = avg_neighbor_distances(query_seurat_object = query_snseq_neurons,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = distance.metric)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
FeaturePlot(query_snseq_neurons,features = "avg_neighbor_distance")
## on hippocampus
hippocampus_bakulski_seurat = avg_neighbor_distances(query_seurat_object = hippocampus_bakulski_seurat,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = distance.metric)
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
FeaturePlot(hippocampus_bakulski_seurat,features = "avg_neighbor_distance")
hist(mean_between_distance,xlim = c(2,7))
hist(mean_between_distance_reference,xlim = c(2,7))
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
reference_seurat_object
neuron_map_seurat
reference_seurat_object = avg_neighbor_distances(query_seurat_object = reference_seurat_object,reference_seurat = reference_seurat_object,reduction_name = "scvi",
query_nn = "ref_nn",distance.metric = distance.metric)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
mean_between_distance_reference = apply(neighbors_reference_object@nn.idx,1,function(idx_of_neighbor,latent_space){
distances_of_ref_neighbors = as.matrix(dist( latent_space[idx_of_neighbor,],method = "euclidean"))
mean(distances_of_ref_neighbors[upper.tri(distances_of_ref_neighbors)])
},latent_space=latent_space)
hist(mean_between_distance_reference,xlim = c(2,7))
neighbors_reference_object_WORKED = neighbors_reference_object
neighbors_reference_object = Seurat::FindNeighbors(reference_seurat_object@reductions[[reduction_name]]@cell.embeddings,k.param = 30, return.neighbor =TRUE,annoy.metric="euclidean")
mean_between_distance_reference = apply(neighbors_reference_object@nn.idx,1,function(idx_of_neighbor,latent_space){
distances_of_ref_neighbors = as.matrix(dist( latent_space[idx_of_neighbor,],method = "euclidean"))
mean(distances_of_ref_neighbors[upper.tri(distances_of_ref_neighbors)])
},latent_space=latent_space)
hist(mean_between_distance_reference,xlim = c(2,7))
hist(mean_between_distance_reference,xlim = c(2,7))
neighbors_reference_object = reference_seurat_object@neighbors$ref_nn
mean_between_distance_reference = apply(neighbors_reference_object@nn.idx,1,function(idx_of_neighbor,latent_space){
distances_of_ref_neighbors = as.matrix(dist( latent_space[idx_of_neighbor,],method = "euclidean"))
mean(distances_of_ref_neighbors[upper.tri(distances_of_ref_neighbors)])
},latent_space=latent_space)
hist(mean_between_distance_reference,xlim = c(2,7))
## on reference
reference_seurat_object = Seurat::FindNeighbors(reference_seurat_object,reduction="scvi",dims = 1:ncol(reference_seurat_object@reductions$scvi@cell.embeddings),
k.param = 30, return.neighbor =TRUE,annoy.metric=distance.metric,graph.name="ref_nn")
reference_seurat_object = avg_neighbor_distances(query_seurat_object = reference_seurat_object,reference_seurat = reference_seurat_object,reduction_name = "scvi",
query_nn = "ref_nn",distance.metric = distance.metric)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
distance.metric = "cosine"
## on reference
reference_seurat_object = Seurat::FindNeighbors(reference_seurat_object,reduction="scvi",dims = 1:ncol(reference_seurat_object@reductions$scvi@cell.embeddings),
k.param = 30, return.neighbor =TRUE,annoy.metric=distance.metric,graph.name="ref_nn")
reference_seurat_object = avg_neighbor_distances(query_seurat_object = reference_seurat_object,reference_seurat = reference_seurat_object,reduction_name = "scvi",
query_nn = "ref_nn",distance.metric = distance.metric)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
FeaturePlot(reference_seurat_object,features = "avg_neighbor_distance")
## on sn seq
query_snseq_neurons = avg_neighbor_distances(query_seurat_object = query_snseq_neurons,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = distance.metric)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
FeaturePlot(query_snseq_neurons,features = "avg_neighbor_distance")
## on hippocampus
hippocampus_bakulski_seurat = avg_neighbor_distances(query_seurat_object = hippocampus_bakulski_seurat,reference_seurat = neuron_map_seurat,reduction_name = "scvi",
query_nn = "query_ref_nn",distance.metric = distance.metric)
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
FeaturePlot(hippocampus_bakulski_seurat,features = "avg_neighbor_distance")
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
load_all()
document()
document()
FeaturePlot(hippocampus_bakulski_seurat,features = "avg_neighbor_distance")
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
hist(query_snseq_neurons@meta.data$avg_neighbor_distance)
hist(reference_seurat_object@meta.data$avg_neighbor_distance)
hist(hippocampus_bakulski_seurat@meta.data$avg_neighbor_distance)
FeaturePlot(query_snseq_neurons,features = "avg_neighbor_distance")
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
View(markers_welch)
markers_welch$specificity = (markers_welch$pct.1 / markers_welch$pct.2) * markers_welch$avg_log2FC
markers_welch$specificity[markers_welch$specificity> 100] = 100
markers_welch = markers_welch %>% dplyr::select(cluster,gene,specificity,avg_log2FC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.001) %>%
dplyr::arrange(desc(specificity))
View(markers_welch)
markers_welch = markers_welch %>% dplyr::select(cluster,gene,specificity,avg_log2FC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.001) %>%
dplyr::arrange(desc(specificity))
## load markers and add
markers_welch = data.table::fread(paste0(welch_folder_static,"welch_BNST_seuratclusters_markers.txt"),data.table = FALSE)
markers_welch$specificity = (markers_welch$pct.1 / markers_welch$pct.2) * markers_welch$avg_log2FC
markers_welch$specificity[markers_welch$specificity> 100] = 100
markers_welch = markers_welch %>% dplyr::select(cluster,gene,specificity,avg_log2FC,pct.1,pct.2,p_val_adj) %>% dplyr::filter(p_val_adj< 0.001) %>%
dplyr::arrange(desc(specificity))
welch_seurat_downsampled@misc$seurat_clusters_markers = markers_welch
## add additional info
welch_seurat_downsampled@misc$object_info = "Dataset Macosko Lab, GSE126836 This is a standard processing of the BNST dataset (neurons only) associated with the LIGER paper. Sn-seq using 10x v3. Downsampled to 40k cells"
welch_seurat_downsampled@misc$object_link = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126836"
## add additional info
welch_seurat_downsampled@misc$object_info = "Dataset Macosko Lab, GSE126836. This is a standard processing of the BNST dataset (neurons only) associated with the LIGER paper. Sn-seq using 10x v3. Downsampled to 40k cells"
welch_seurat_downsampled@misc$object_link = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126836"
FeaturePlot(welch_seurat,features = "Sim1",order = TRUE,raster = F)
FeaturePlot(welch_seurat,features = "Trh",order = TRUE,raster = F)
FeaturePlot(welch_seurat,features = "Oxt",order = TRUE,raster = F)
FeaturePlot(welch_seurat,features = "Th",order = TRUE,raster = F)
FeaturePlot(welch_seurat,features = "Npy",order = TRUE,raster = F)
welch_seurat_downsampled@misc$seurat_clusters_markers = markers_welch
## add additional info
welch_seurat_downsampled@misc$object_info = "Dataset Macosko Lab, GSE126836. This is a standard processing of the BNST dataset (neurons only) associated with the LIGER paper. Sn-seq using 10x v3. Downsampled to 40k cells"
welch_seurat_downsampled@misc$object_link = "https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE126836"
seurat_maggie_pmch_quick@misc$object_preferences = list(selected_gene = "Npy", selected_col = "seurat_clusters")
## save
saveRDS(welch_seurat_downsampled,paste0(welch_folder_static,"welch_BNST_downsampled_141021.rds"))
welch_seurat_downsampled@misc$object_preferences = list(selected_gene = "Npy", selected_col = "seurat_clusters")
## save
saveRDS(welch_seurat_downsampled,paste0(welch_folder_static,"welch_BNST_downsampled_141021.rds"))
load_all()
document()
load_all()
load_all()
document()
library(dplyr)
library(Seurat)
library(mapscvi)
snseq_data_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/yeo_data/hypothalamus_nucSeq/mapdata/"
system(paste0("mkdir -p ",paste0(snseq_data_path)))
snseq_data_path
