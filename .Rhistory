use_git()
library(devtools)
library(tidyverse)
library(tidyr, lib.loc = "/usr/local/lib/R/site-library")
detach("package:tidyr", unload = TRUE)
library(broom, lib.loc = "/usr/local/lib/R/site-library")
detach("package:broom", unload = TRUE)
library(tidyr, lib.loc = "/usr/local/lib/R/site-library")
detach("package:tidyr", unload = TRUE)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
use_git()
library(devtools)
use_git()
?use_r
library(devtools)
?use_r
use_r("mapping_functions")
use_r("plot_functions")
use_r("prepare_functions")
load_all()
check()
use_mit_license()
devtools::document()
devtools::document()
?predict_query
devtools::document()
?SeuratObjects
?ncol
?Seurat::ProjectUMAP
?RunUMAP
devtools::document()
check()
check()
devtools::document()
devtools::document()
check()
check()
check()
check()
check()
library(Matrix, lib.loc = "/usr/local/lib/R/library")
detach("package:Matrix", unload = TRUE)
check()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check()
devtools::document()
check()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
check()
?devtools::check
detach("package:Matrix", unload = TRUE)
?devtools::check
check()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check()
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
detach("package:Matrix", unload = TRUE)
library(Matrix, lib.loc = "/usr/local/lib/R/library")
detach("package:Matrix", unload = TRUE)
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check()
detach("package:Matrix", unload = TRUE)
library(Seurat, lib.loc = "/usr/local/lib/R/site-library")
?.libPaths()
.libPaths()
?check
?devtools::check
?.libPaths()
?.libPaths()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check(env_vars =c(R_LIBS="/usr/local/lib/R/site-library"))
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
devtools::load_all()
?check
devtools::check()
check(env_vars =c(R_LIBS="/usr/local/lib/R/site-library"))
check(env_vars =c(R_LIBS="/usr/local/lib/R/site-library",R_LIBS_USER="/usr/local/lib/R/site-library"))
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
check(env_vars =c(R_LIBS="/usr/local/lib/R/site-library",R_LIBS_USER="/usr/local/lib/R/site-library"))
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
.libPaths()
?.libPaths
.libPaths("/usr/local/lib/R/site-library")
devtools::check()
.libPaths()
.libPaths("/usr/local/lib/R/site-library")
.libPaths()
library(Matrix, lib.loc = "/usr/local/lib/R/library")
library(Matrix, lib.loc = "/usr/local/lib/R/library")
detach("package:Matrix", unload = TRUE)
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
remove.packages("Matrix", lib="/usr/local/lib/R/library")
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
devtools::check()
.libPaths
.libPaths()
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
library(devtools)
devtools::check()
.libPaths()
detach("package:Matrix", unload = TRUE)
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
devtools::document()
devtools::load_all()
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
devtools::check()
?
devtools::install
devtools::install()
devtools::check()
devtools::install_deps(dependencies = TRUE)
devtools::check()
library(devtools)
devtools::check()
?install.packages
library(devtools)
library(dplyr, lib.loc = "/usr/local/lib/R/site-library")
library(tidyverse)
devtools::check()
detach("package:Matrix", unload = TRUE)
library(Matrix, lib.loc = "/usr/local/lib/R/site-library")
detach("package:Matrix", unload = TRUE)
.onLoad
?.onLoad
.libPaths()
devtools::check()
devtools::document()
devtools::check()
library(devtools)
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
use_readme_rmd()
build_readme()
check()
install()
devtools::document()
suffix ="mapped_data_yeo_neurons" # a name
query_seurat_object_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapFull_v4/harmonization_results/mapped_data_yeo_full/mapped_data_yeo_full.h5Seurat" # seurat object to load
subset_col = "predicted_Curated_Class" # specifiy metdata column to be usedfor subsetting (e.g. subset to neurons when mapping on neuron ref)
subset_values = "Neurons"
query_seurat_object = SeuratDisk::LoadH5Seurat(query_seurat_object_path)
map_name = "hypothalamus_neurons_reference" # reference map
map_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/"
model_path = paste0(map_path,map_name,"_model/")
# load the variable feature from modelpath
var_features = utils::read.table(paste0(model_path,"var_names.csv"),header = F)$V1
# export to anndata
var_df = data.frame(var_names = rownames(SeuratObject::GetAssayData(query_seurat_object,slot='counts',assay=assay)))
assay="RNA"
max_epochs = 30
query_reduction="scvi"
# export to anndata
var_df = data.frame(var_names = rownames(SeuratObject::GetAssayData(query_seurat_object,slot='counts',assay=assay)))
rownames(var_df) = var_df$var_names
# make a matrix with included variable genes in query
included_var_features = intersect(var_features,var_df$var_names)
matrix_for_anndata = as.matrix(SeuratObject::GetAssayData(query_seurat_object,slot='counts',assay=assay)[included_var_features,])
# for scvi to work we also need the others: we add them as all zero columns at the end
missing_var_features = setdiff(var_features,var_df$var_names)
add_matrix = matrix(data = 0,nrow = length(missing_var_features),ncol = ncol(matrix_for_anndata))
rownames(add_matrix) = missing_var_features
colnames(add_matrix) = colnames(matrix_for_anndata)
matrix_for_anndata = rbind(matrix_for_anndata,add_matrix)
# make new var_df
var_df = data.frame(var_names = rownames(matrix_for_anndata))
rownames(var_df) = var_df$var_names
# make Serat from updated matrix
temp_seurat = Seurat::CreateSeuratObject(counts = matrix_for_anndata, meta.data = query_seurat_object@meta.data, project = query_seurat_object@project.name)
?SeuratDisk::SaveH5Seurat
?export_h5Seurat_anndata
assay
temp_dir = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/tmp_mapscvi/"
# make path if not existing
system(paste0("mkdir -p ",temp_dir))
# make Seurat from updated matrix
temp_seurat = Seurat::CreateSeuratObject(counts = matrix_for_anndata, meta.data = query_seurat_object@meta.data, project = query_seurat_object@project.name)
?Seurat::CreateSeuratObject
# export anndata
h5Seurat_filename=paste0(temp_dir,"temp_",temp_seurat@project.name,".h5Seurat")
h5Seurat_filename
SeuratDisk::SaveH5Seurat(object = temp_seurat,filename = h5Seurat_filename,overwrite = TRUE)
updated_name = gsub(".h5Seurat",paste0("_",assay,".h5ad"),h5Seurat_filename)
SeuratDisk::Convert(h5Seurat_filename, dest = updated_name,assay=assay,verbose=FALSE,overwrite=TRUE)
? SeuratDisk::Convert
max_epochs
# call python script
output_file = paste0(temp_dir,"predicted_",temp_seurat@project.name,".txt")
output_file
# call python script
output_file = paste0(temp_dir,"predicted_",temp_seurat@project.name,".txt")
system(paste0("python -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
updated_name
model_path
# call python script
output_file = paste0(temp_dir,"predicted_",temp_seurat@project.name,".txt")
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
system(paste0("python3 -u python/map_scvi.py ",updated_name," ",model_path," ",output_file," ",max_epochs))
# load results into R
scvi_prediction = read.table(output_file,quote = F)
?read.table
# load results into R
scvi_prediction = read.table(output_file)
View(scvi_prediction)
## load neuron map
map_name = "hypothalamus_neurons_reference"
map_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/"
map_seurat_path = paste0(map_path,map_name,".h5Seurat")
neuron_map_seurat = SeuratDisk::LoadH5Seurat(map_seurat_path)
FeaturePlot(neuron_map_seurat,features = c("Hdc"),order = TRUE)+NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Hdc"),order = TRUE)+NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Hdc"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Vmat2"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Slc18a2"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Slc32a1","Slc17a6","Slc18a2","Hdc"),order = TRUE)+Seurat::NoAxes()
DimPlot(neuron_map_seurat,group.by = "suggested_region_curated")+Seurat::NoAxes()
Seurat::DimPlot(neuron_map_seurat,group.by = "suggested_region_curated")+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Trh"),order = TRUE)+Seurat::NoAxes()
table(neuron_map_seurat@meta.data$K169_named)
unique(neuron_map_seurat@meta.data[neuron_map_seurat@meta.data$other_likely_regions[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"]])
unique(neuron_map_seurat@meta.data$other_likely_regions[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"])
unique(neuron_map_seurat@meta.data$suggested_region[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"])
unique(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"])
table(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"])
sort(table(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"]),decreasing = TRUE)
Seurat::FeaturePlot(neuron_map_seurat,features = c("Prph"),order = TRUE)+Seurat::NoAxes()
sort(table(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Lef1.Prph"]),decreasing = TRUE)
sort(table(neuron_map_seurat@meta.data$Author_CellType[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Lef1.Prph"]),decreasing = TRUE)
sort(table(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Lef1.Prph"]),decreasing = TRUE)
sort(table(neuron_map_seurat@meta.data$K329_named[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Lef1.Prph"]),decreasing = TRUE)
Seurat::FeaturePlot(neuron_map_seurat,features = c("Gm8773"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Hdc"),order = TRUE)+Seurat::NoAxes()
sort(table(neuron_map_seurat@meta.data$K329_named[neuron_map_seurat@meta.data$K329_named=="Slc32a1.Hmx2.Lef1.Prph.Hdc"]),decreasing = TRUE)
sort(table(neuron_map_seurat@meta.data$Dataset[neuron_map_seurat@meta.data$K329_named=="Slc32a1.Hmx2.Lef1.Prph.Hdc"]),decreasing = TRUE)
Seurat::FeaturePlot(neuron_map_seurat,features = c("Slc18a2"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Slc32a1","Slc17a6","Slc18a2","Hdc"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Slc32a1","Slc17a6","Slc18a2","Hdc"),order = TRUE)#+Seurat::NoAxes()
sort(table(neuron_map_seurat@meta.data$suggested_region_curated[neuron_map_seurat@meta.data$K329_named=="Slc32a1.Hmx2.Lef1.Prph.Hdc"]),decreasing = TRUE)
sort(table(neuron_map_seurat@meta.data$other_likely_regions[neuron_map_seurat@meta.data$K329_named=="Slc32a1.Hmx2.Lef1.Prph.Hdc"]),decreasing = TRUE)
check()
require(devtools)
check()
check()
check()
?map_new_seurat_hypoMap
reference_map_reduc = neuron_map_seurat@reductions$scvi
reference_map_reduc = neuron_map_seurat@reductions$scvi
reference_map_umap = neuron_map_seurat@reductions$umap_scvi
reference_map_metadata = neuron_map_seurat@meta.data
saveRDS(
?saveRDS
Seurat::FeaturePlot(neuron_map_seurat,features = c("Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Nkx2-4"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Cxcl12"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Nkx2-4","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Tbx3","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Pnoc","Sst"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Nts","Sst"),order = TRUE)+Seurat::NoAxes()
unique(neuron_map_seurat@meta.data$K169_pruned[neuron_map_seurat@meta.data$K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"])
a1=neuron_map_seurat@misc$markers_comparisons_all
View(a1)
Seurat::FeaturePlot(neuron_map_seurat,features = c("St18","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Gsx1","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Serpina3n","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Gsx1","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Asb4","Trh"),order = TRUE)+Seurat::NoAxes()
Seurat::FeaturePlot(neuron_map_seurat,features = c("Gpr179","Trh"),order = TRUE)+Seurat::NoAxes()
mapped_data_yeo_neurons= SeuratDisk::LoadH5Seurat("/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_yeo_neurons/mapped_data_yeo_neurons.h5Seurat")
# check results
colnames(mapped_data_yeo_neurons@meta.data)
DimPlot(mapped_data_yeo_neurons,group.by = "predicted_K169_named",label = TRUE,label.size = 2)+NoLegend()+NoAxes()
table(mapped_data_yeo_neurons@meta.data$Diet)
deg_per_cluster = FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
Idents(mapped_data_yeo_neurons) <- "Diet"
deg_per_cluster = FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
Idents(mapped_data_yeo_neurons)
table(mapped_data_yeo_neurons@meta.data$Diet)
?FindMarkers
deg_per_cluster = FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
##########
### check fos1 diff
##########
require(Seurat)
table(mapped_data_yeo_neurons@meta.data$Diet)
Idents(mapped_data_yeo_neurons) <- "Diet"
deg_per_cluster = FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
head(x = Idents(object = mapped_data_yeo_neurons))
mapped_data_yeo_neurons$Diet
levels(mapped_data_yeo_neurons$Diet)
mapped_data_yeo_neurons$Diet = as.factor(mapped_data_yeo_neurons$Diet)
Idents(mapped_data_yeo_neurons) <- "Diet"
deg_per_cluster = FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
deg_per_cluster = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
deg_per_cluster = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = fast,ident.2 = adlib,group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
deg_per_cluster = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",ident.2 = "adlib",group.by = "predicted_K169_named",features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
?FindAllMarkers
source("/beegfs/scratch/bruening_scratch/lsteuernagel/projects/2020-11-jule-single-cell-rnaseq/functions/findDEG.R")
deg_per_cluster = FindAll_DEGs(mapped_data_yeo_neurons,group_var = "Diet",idents_name = "predicted_K169_named",max.cells.per.ident = 1000,features = c("Fos","Egr1","Agrp","Pomc"))
deg_per_cluster = FindAll_DEGs(mapped_data_yeo_neurons,group_var = "Diet",idents_name = "predicted_K169_named",max.cells.per.ident = 1000,features = c("Fos","Egr1","Agrp","Pomc"),logfc.threshold=0,pval_filter=Inf)
View(deg_per_cluster)
?FindMarkers
cells1=mapped_data_yeo_neurons@meta.data$Cell_ID[mapped_data_yeo_neurons@meta.data$Diet=="adlib"  & mapped_data_yeo_neurons$predicted_K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"]
cells2=mapped_data_yeo_neurons@meta.data$Cell_ID[mapped_data_yeo_neurons@meta.data$Diet=="fast"  & mapped_data_yeo_neurons$predicted_K169_named=="Slc32a1.Hmx2.Gsx1.Ebf1.Trh"]
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000)
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000,min.pct=0)
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000,min.pct=-Inf, logfc.threshold =0)
a1= FetchData(mapped_data_yeo_neurons,features = c("Fos","Egr1","Trh"),cells = c(cells1,cells2))
?FetchData
?FetchData
a1= FetchData(mapped_data_yeo_neurons,vars = c("Fos","Egr1","Trh"),cells = c(cells1,cells2))
View(a1)
cells1=mapped_data_yeo_neurons@meta.data$Cell_ID[mapped_data_yeo_neurons@meta.data$Diet=="adlib"  & mapped_data_yeo_neurons$predicted_K169_named=="Slc32a1.Otp.Npy.Agrp"]
table(mapped_data_yeo_neurons$predicted_K169_named)
cells1=mapped_data_yeo_neurons@meta.data$Cell_ID[mapped_data_yeo_neurons@meta.data$Diet=="adlib"  & mapped_data_yeo_neurons$predicted_K169_named=="Slc32a1.Otp.Npy.Agrp.Gm8773"]
cells2=mapped_data_yeo_neurons@meta.data$Cell_ID[mapped_data_yeo_neurons@meta.data$Diet=="fast"  & mapped_data_yeo_neurons$predicted_K169_named=="Slc32a1.Otp.Npy.Agrp.Gm8773"]
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=-Inf, logfc.threshold =0)
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
deg_per_cluster_one = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,features = c("Fos","Egr1","Agrp","Pomc"),max.cells.per.ident = 1000,min.pct=-Inf, logfc.threshold =0)
?FindMarkers
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons@assays$RNA@data,cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons,cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = "predicted_K169_named",cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = "Slc32a1.Otp.Npy.Agrp.Gm8773",cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
degs_Slc32a1.Otp.Npy.Agrp.Gm8773 = Seurat::FindMarkers(mapped_data_yeo_neurons,ident.1 = "fast",cells.1=cells1,cells.2 = cells2,max.cells.per.ident = 1000,min.pct=0, logfc.threshold =0)
dim(mapped_data_yeo_neurons@assays$RNA@data)
