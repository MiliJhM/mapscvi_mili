query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
?SetAssayData
a3=query_romanov[["RNA"]]
query_romanov[["RNA"]] = SetAssayData(object = query_romanov[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov[["RNA"]] = SetAssayData(object = query_romanov[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov2 = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov2@reductions = list()
query_romanov2@meta.data = query_romanov2@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = NULL)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = empty_matrix)
query_romanov_clean = CreateAssayObject(counts = query_romanov2@assays$RNA@counts,meta.data=query_romanov2@meta.data)
query_romanov_clean=NormalizeData(query_romanov_clean)
query_romanov3=NormalizeData(query_romanov3)
query_romanov3 = query_romanov2
query_romanov3=NormalizeData(query_romanov3)
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
print(object.size(query_romanov3) / 1000000)
query_romanov3[["RNA"]]@scale.data = dummy
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]]@scale.data = dummy
print(object.size(query_romanov3) / 1000000)
query_romanov3=NormalizeData(query_romanov3)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
#query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
query_romanov3 = SetAssayData(object = query_romanov3, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]]@scale.data = dummy
print(object.size(query_romanov3) / 1000000)
query_romanov3=NormalizeData(query_romanov3)
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov = SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov[["RNA"]]@scale.data = dummy
print(object.size(query_romanov) / 1000000)
#save testdata
#save testdata
save(query_romanov,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/query_romanov.RData")
load_all()
document()
build_readme()
build_readme()
library(devtools)
load_all()
document()
check()
check()
?scRNAseq::LaMannoBrainData
load_all()
document()
?query_romanov
?sce_lamanno_da
check()
tools::checkRdaFiles()
?tools::checkRdaFiles()
?tools::checkRdaFiles("data/")
tools::checkRdaFiles("data/")
?file
?save
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov = SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov[["RNA"]]@scale.data = dummy
print(object.size(query_romanov) / 1000000)
#save testdata
save(query_romanov,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/query_romanov.RData",compress="xz",compression_level = "9")
save(sce_lamanno_da,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/sce_lamanno_da.RData",compress="xz",compression_level = "9")
map_name = "hypothalamus_neurons_reference"
map_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypoMap/hypoMap_objects/"
map_seurat_path = paste0(map_path,map_name,".rds")
neuron_map_seurat = readRDS(map_seurat_path)
# # make new seurat object with reduced size
reference_hypoMap = CreateSeuratObject(neuron_map_seurat@assays$RNA@counts,project = "HypoMap_reference",meta.data = neuron_map_seurat@meta.data)
# add reductions back in
reference_hypoMap@reductions = neuron_map_seurat@reductions
# overwrite counts with empty sparse matrix to save space
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = reference_hypoMap@assays$RNA@counts@Dim, dimnames = reference_hypoMap@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
reference_hypoMap = SetAssayData(object = reference_hypoMap, slot = "counts", new.data = empty_matrix)
reference_hypoMap = SetAssayData(object = reference_hypoMap, slot = "data", new.data = empty_matrix)
# overwrite other slots with empty dummy matrix
dummy=matrix(data = as.numeric())
reference_hypoMap@assays$RNA@scale.data=dummy
reference_hypoMap@assays$RNA@meta.features <- as.data.frame(dummy[,-1])
print(object.size(reference_hypoMap) / 1000000)
reference_hypoMap_neurons = reference_hypoMap
reference_hypoMap_neurons = subset(reference_hypoMap_neurons,cells = cluster_downsample$Cell_ID)
print(object.size(reference_hypoMap_neurons) / 1000000)
project_name = "hypothalamus_full_map"
project_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapFull_v4/harmonization_results/"
seurat_file_name = paste0(project_path,project_name,".h5Seurat")
full_map_seurat = SeuratDisk::LoadH5Seurat(seurat_file_name)
print(object.size(reference_hypoMap_neurons) / 1000000)
save(reference_hypoMap_neurons,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_neurons.RData",compress="xz",compression_level = "9")
reference_hypoMap_full = CreateSeuratObject(full_map_seurat@assays$RNA@counts,project = "HypoMap_reference",meta.data = full_map_seurat@meta.data)
# add reductions back in
reference_hypoMap_full@reductions = full_map_seurat@reductions
# overwrite counts with empty sparse matrix to save space
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = reference_hypoMap_full@assays$RNA@counts@Dim, dimnames = reference_hypoMap_full@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
reference_hypoMap_full = SetAssayData(object = reference_hypoMap_full, slot = "counts", new.data = empty_matrix)
reference_hypoMap_full = SetAssayData(object = reference_hypoMap_full, slot = "data", new.data = empty_matrix)
# overwrite other slots with empty dummy matrix
dummy=matrix(data = as.numeric())
reference_hypoMap_full@assays$RNA@scale.data = dummy
reference_hypoMap_full@assays$RNA@meta.features <- as.data.frame(dummy[,-1])
print(object.size(reference_hypoMap_full) / 1000000)
## downsample:
## source("/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scHarmonize/utils.R") or See function below!!!!
cluster_downsample = downsample_balanced_iterative(reference_hypoMap_full@meta.data,target_sample_size = 20000,predictor_var = "Curated_CellType",
stepsize = 500,global_seed = 12345)
table(cluster_downsample$Curated_CellType)
reference_hypoMap_full = subset(reference_hypoMap_full,cells = cluster_downsample$Cell_ID)
print(object.size(reference_hypoMap_full) / 1000000)
# # make new seurat object with reduced size
reference_hypoMap = CreateSeuratObject(neuron_map_seurat@assays$RNA@counts,project = "HypoMap_reference",meta.data = neuron_map_seurat@meta.data)
# add reductions back in
reference_hypoMap@reductions = neuron_map_seurat@reductions
# overwrite counts with empty sparse matrix to save space
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = reference_hypoMap@assays$RNA@counts@Dim, dimnames = reference_hypoMap@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
reference_hypoMap = SetAssayData(object = reference_hypoMap, slot = "counts", new.data = empty_matrix)
reference_hypoMap = SetAssayData(object = reference_hypoMap, slot = "data", new.data = empty_matrix)
# overwrite other slots with empty dummy matrix
dummy=matrix(data = as.numeric())
reference_hypoMap@assays$RNA@scale.data=dummy
reference_hypoMap@assays$RNA@meta.features <- as.data.frame(dummy[,-1])
print(object.size(reference_hypoMap) / 1000000)
reference_hypoMap_neurons = reference_hypoMap
save(reference_hypoMap_neurons,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_neurons.RData",compress="xz",compression_level = "9")
# # make new seurat object with reduced size
reference_hypoMap_full = CreateSeuratObject(full_map_seurat@assays$RNA@counts,project = "HypoMap_reference",meta.data = full_map_seurat@meta.data)
# add reductions back in
reference_hypoMap_full@reductions = full_map_seurat@reductions
# overwrite counts with empty sparse matrix to save space
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = reference_hypoMap_full@assays$RNA@counts@Dim, dimnames = reference_hypoMap_full@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
reference_hypoMap_full = SetAssayData(object = reference_hypoMap_full, slot = "counts", new.data = empty_matrix)
reference_hypoMap_full = SetAssayData(object = reference_hypoMap_full, slot = "data", new.data = empty_matrix)
# overwrite other slots with empty dummy matrix
dummy=matrix(data = as.numeric())
reference_hypoMap_full@assays$RNA@scale.data = dummy
reference_hypoMap_full@assays$RNA@meta.features <- as.data.frame(dummy[,-1])
print(object.size(reference_hypoMap_full) / 1000000)
# save
save(reference_hypoMap_full,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_full.RData",compress="xz",compression_level = "9")
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap_full@meta.data
colnames(temp_meta)
View(temp_meta)
temp_meta_all = temp_meta
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Dataset,Batch_ID,Technology,inferred_sex,nFeature_RNA,nCount_RNA,rpl_signature_expr_median,Age,Diet,Subregion,Curated_Class,Curated_CellType,Author_CellType)
print(object.size(temp_meta) / 1000000)
print(object.size(temp_meta_all) / 1000000)
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap_full@meta.data
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Dataset,Batch_ID,Technology,inferred_sex,nFeature_RNA,nCount_RNA,rpl_signature_expr_median,
Age,Diet,Subregion,Curated_Class,Curated_CellType,Author_CellType)
rownames(temp_meta) = temp_meta$Cell_ID
reference_hypoMap_full@meta.data = temp_meta
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap@meta.data
colnames(temp_meta)
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap@meta.data
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Dataset,Batch_ID,Technology,inferred_sex.x,nFeature_RNA,nCount_RNA,rpl_signature_expr_median,
Age,Diet,Subregion,suggested_region_curated,Author_CellType,K4_named,K14_named,K31_named,K98_named,K169_named,K240_named,
K329_named,K4_pruned,K14_pruned,K31_pruned,K98_pruned,K169_pruned,K240_pruned,K329_pruned)
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap@meta.data
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Dataset,Batch_ID,Technology,inferred_sex.x,nFeature_RNA,nCount_RNA,rpl_signature_expr_median,
Age,Diet,Subregion,suggested_region_curated,Author_CellType,K4_named,K14_named,K31_named,K98_named,K169_named,K240_named,
K329_named,K4_pruned,K14_pruned,K31_pruned,K98_pruned,K169_pruned,K240_pruned,K329_pruned)
rownames(temp_meta) = temp_meta$Cell_ID
reference_hypoMap@meta.data = temp_meta
# print size and change name
print(object.size(reference_hypoMap) / 1000000)
reference_hypoMap_neurons = reference_hypoMap
save(reference_hypoMap_neurons,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_neurons.RData",compress="xz",compression_level = "9")
# remove some metadata to make the object smaller
temp_meta = reference_hypoMap_full@meta.data
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Dataset,Batch_ID,Technology,inferred_sex,nFeature_RNA,nCount_RNA,rpl_signature_expr_median,
Age,Diet,Subregion,Curated_Class,Curated_CellType,Author_CellType)
rownames(temp_meta) = temp_meta$Cell_ID
reference_hypoMap_full@meta.data = temp_meta
# save
save(reference_hypoMap_full,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_full.RData",compress="xz",compression_level = "9")
document()
?reference_hypoMap_full
load_all()
document()
library(mapscvi)
query_romanov
names(query_romanov@reductions)
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons", suffix="query_romanov_neurons",max_epochs=20)
names(query_romanov@reductions)
head(sort(table(query_romanov_neurons@meta.data$predicted),decreasing = TRUE),n = 10)
plot_query_labels(query_seura_object=query_romanov_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
a1=query_romanov@meta.data
names(query_romanov_neurons@reductions)
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons", suffix="query_romanov_neurons",max_epochs=20)
View(a1)
# remove some metadata to make the object smaller
temp_meta = query_romanov@meta.data
View(temp_meta)
colnames(temp_meta)
?predicted_Curated_Class
# remove some metadata to make the object smaller
temp_meta = query_romanov@meta.data
temp_meta = temp_meta %>% dplyr::select(Cell_ID,Sample_ID,nFeature_RNA,nCount_RNA,percent.mt,Sex,Author_CellType,Subregion,predicted_Curated_Class)
rownames(temp_meta) = temp_meta$Cell_ID
query_romanov@meta.data = temp_meta
# #
# require(scRNAseq)
# sce_lamanno_da <- LaMannoBrainData(which = "mouse-adult",ensembl=FALSE)
# object.size(sce_lamanno_da) / 1000000
# ##save(sce_lamanno_da,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/sce_lamanno_da.RData")
#
# #save testdata
save(query_romanov,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/query_romanov.RData",compress="xz",compression_level = "9")
document()
load_all()
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons", suffix="query_romanov_neurons",max_epochs=20)
names(query_romanov_neurons@reductions)
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons", suffix="query_romanov_neurons",max_epochs=20)
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons", suffix="query_romanov_neurons",max_epochs=20)
names(query_romanov_neurons@reductions)
head(sort(table(query_romanov_neurons@meta.data$predicted),decreasing = TRUE),n = 10)
plot_query_labels(query_seura_object=query_romanov_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
plot_query_labels(query_seura_object=query_romanov_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
Seurat::FeaturePlot(query_seura_object,features = "probability")+NoAxes()
?query_romanov_neurons
colnames(query_romanov_neurons@meta.data)
Seurat::FeaturePlot(query_romanov_neurons,features = "prediction_probability")+NoAxes()
sce_lamanno_da
lamanno_seurat_object = prepare_query_hypoMap(sce_lamanno_da,suffix="lamanno_da",normalize=TRUE)
lamanno_seurat_object
model_path = paste0(system.file('extdata/models/hypothalamus_neurons_reference_model', package = 'mapscvi'),"/")
max_epochs = 20
lamanno_seurat_object = predict_query(lamanno_seurat_object,model_path,max_epochs = max_epochs)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
names(lamanno_seurat_object@reductions)
cluster_labels = neuron_map_seurat@meta.data$K169_named
reference_reduction = "scvi"
lamanno_seurat_object = project_query(query_seurat_object = lamanno_seurat_object,
reference_map_reduc = neuron_map_seurat@reductions[[reference_reduction]],
reference_map_umap = neuron_map_seurat@reductions[[paste0("umap_",reference_reduction)]],
query_reduction = "scvi",
label_vec =cluster_labels)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
head(sort(table(lamanno_seurat_object@meta.data$predicted),decreasing = TRUE),n = 10)
Seurat::FeaturePlot(lamanno_seurat_object,features = "prediction_probability")+NoAxes()
colnames(markers_comparisons_all)
colnames(neuron_map_seurat@misc$markers_comparisons_all)
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>% dplyr::filter(grepl("K169_",cluster_1) & specificity > 0.5 & p_val_adj < 0.001)
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>% dplyr::filter(grepl("K169_",cluster_1) & specificity > 0.5 & p_val_adj < 0.001)
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>% dplyr::filter(grepl("K169_",cluster_1))
a1=neuron_map_seurat@misc$markers_comparisons_all
View(a1)
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>% dplyr::filter(grepl("K169",cluster_1) & specificity > 0.5 & p_val_adj < 0.001)
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>%
dplyr::filter(grepl("K169",cluster_1) & specificity > 0.5 & p_val_adj < 0.001) %>% dplyr::arrange(desc(specificity))
# add markers as a list for K169_pruned
markers_K169_pruned_list = neuron_map_seurat@misc$markers_comparisons_all %>%
dplyr::filter(grepl("K169",cluster_1) & specificity > 0.5 & p_val_adj < 0.001) %>% dplyr::arrange(desc(specificity))
markers_K169_pruned_list = base::split(markers_K169_pruned_list$gene,markers_K169_pruned_list$cluster_1)
sapply(markers_K169_pruned_list,length)
reference_hypoMap@misc$markers_K169_pruned = markers_K169_pruned_list
# print size and change name
print(object.size(reference_hypoMap) / 1000000)
print(object.size(reference_hypoMap_neurons) / 1000000)
reference_hypoMap_neurons = reference_hypoMap
save(reference_hypoMap_neurons,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/reference_hypoMap_neurons.RData",compress="xz",compression_level = "9")
laod_all()
load_all()
mapscvi::reference_hypoMap_neurons
cluster_labels = mapscvi::reference_hypoMap_neurons@meta.data$K169_named
reference_reduction = "scvi"
lamanno_seurat_object = project_query(query_seurat_object = lamanno_seurat_object,
reference_map_reduc = mapscvi::reference_hypoMap_neurons@reductions[[reference_reduction]],
reference_map_umap = mapscvi::reference_hypoMap_neurons@reductions[[paste0("umap_",reference_reduction)]],
query_reduction = "scvi",
label_vec =cluster_labels)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=mapscvi::reference_hypoMap_neurons,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=mapscvi::reference_hypoMap_neurons,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
marker_genes = mapscvi::reference_hypoMap_neurons@misc$markers_K169_pruned
head(sapply(marker_genes,length))
lamanno_seurat_object@meta.data$predicted_K169_named = lamanno_seurat_object@meta.data$predicted
lamanno_seurat_object@meta.data$predicted_K169_named = lamanno_seurat_object@meta.data$predicted
pruned_values = mapscvi::add_paired_annotation(input_annotation = lamanno_seurat_object@meta.data$predicted_K169_named,
reference_annotations = mapscvi::reference_hypoMap_neurons@meta.data[,c("K169_named","K169_pruned")])
head(pruned_values)
marker_genes_K169_pruned = mapscvi::reference_hypoMap_neurons@misc$markers_K169_pruned
head(sapply(marker_genes_K169_pruned,length))
lamanno_seurat_object@meta.data$predicted_K169_pruned = pruned_values
lamanno_seurat_object = check_reference_markers_per_cell(lamanno_seurat_object,marker_genes_K169_pruned,assay="RNA",query_label_col="predicted_K169_pruned",min_expr=0)
Seurat::FeaturePlot(lamanno_seurat_object,features = "marker_pct")+NoAxes()
?mapscvi::map_new_seurat_hypoMap
load_all()
document()
build_readme()
build_readme()
build_readme()
build_readme()
table(reference_hypoMap_full@meta.data$Curated_Class)
build_readme()
build_readme()
install()
library(htmltools)
library(dplyr)
library(Seurat)
library(mapscvi)
romanov_data_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypothalamus/romanov/mapped_data/"
system(paste0("mkdir -p ",paste0(romanov_data_path)))
romanov_data_path
# specify query data:
romanov_original_seurat = readRDS("/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypothalamus/romanov/hypothalamus_romanov_seurat_051020.rds") # seurat object to load
detach("package:mapscvi", unload = TRUE)
library(htmltools)
library(dplyr)
library(Seurat)
library(mapscvi)
romanov_data_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypothalamus/romanov/mapped_data/"
system(paste0("mkdir -p ",paste0(romanov_data_path)))
romanov_data_path
# specify query data:
romanov_original_seurat = readRDS("/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypothalamus/romanov/hypothalamus_romanov_seurat_051020.rds") # seurat object to load
query_romanov_all = map_new_seurat_hypoMap(romanov_original_seurat,
reference_mode = "hypoMap_full",
suffix="query_romanov_all",
label_col="Curated_Class",
max_epochs=30,
reference_seurat=full_map_seurat)
query_romanov_all@meta.data$predicted_Curated_Class = query_romanov_all@meta.data$predicted
plot_query_labels(query_seura_object=query_romanov_all,reference_seurat=full_map_seurat,label_col="Curated_Class",label_col_query = "predicted_Curated_Class",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=2)
saveRDS(query_romanov_all,paste0(romanov_data_path,"query_romanov_all.rds"))
reconstructed_anno = reconstruct_levels(edgelist = neuron_map_seurat@misc$mrtree_edgelist[,c(1,2)],
input_annotation = query_romanov_neurons@meta.data$predicted_K169_pruned,
level_prefix="K[0-9]+",result_prefix = "predicted_")
query_romanov_neurons = map_new_seurat_hypoMap(query_romanov_all,
reference_mode = "hypoMap_neurons",
suffix="query_romanov_neurons",
label_col="K169_pruned",
max_epochs=30,
reference_seurat=neuron_map_seurat,
subset_col = "predicted_Curated_Class",
subset_values = "Neurons")
document()
library(mapscvi)
detach("package:mapscvi", unload = TRUE)
install()
library(htmltools)
library(dplyr)
library(Seurat)
library(mapscvi)
romanov_data_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypothalamus/romanov/mapped_data/"
system(paste0("mkdir -p ",paste0(romanov_data_path)))
romanov_data_path
query_romanov_neurons = map_new_seurat_hypoMap(query_romanov_all,
reference_mode = "hypoMap_neurons",
suffix="query_romanov_neurons",
label_col="K169_pruned",
max_epochs=30,
reference_seurat=neuron_map_seurat,
inferred_sex_varname = "inferred_sex.x",
subset_col = "predicted_Curated_Class",
subset_values = "Neurons")
query_romanov_neurons@meta.data$predicted_K169_pruned = query_romanov_neurons@meta.data$predicted
query_romanov_neurons@meta.data$predicted_K169_named = add_paired_annotation(input_annotation = query_romanov_neurons@meta.data$predicted_K169_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K169_pruned","K169_named")])
colnames(query_romanov_neurons@meta.data)
plot_query_labels(query_seura_object=query_romanov_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",label_col_query = "predicted_K169_named",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = FALSE,label.size=2)
FeaturePlot(query_romanov_neurons,features = "prediction_probability",reduction = "umap_scvi",pt.size = 0.2)+NoAxes()
reconstructed_anno = reconstruct_levels(edgelist = neuron_map_seurat@misc$mrtree_edgelist[,c(1,2)],
input_annotation = query_romanov_neurons@meta.data$predicted_K169_pruned,
level_prefix="K[0-9]+",result_prefix = "predicted_")
colnames(reconstructed_anno) = paste0(colnames(reconstructed_anno),"_pruned")# add the pruned suffix (not done by the function!)
query_romanov_neurons@meta.data = cbind(query_romanov_neurons@meta.data,reconstructed_anno)
query_romanov_neurons@meta.data$predicted_K4_named = add_paired_annotation(input_annotation = query_romanov_neurons@meta.data$predicted_K4_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K4_pruned","K4_named")])
query_romanov_neurons@meta.data$predicted_K14_named = add_paired_annotation(input_annotation = query_romanov_neurons@meta.data$predicted_K14_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K14_pruned","K14_named")])
query_romanov_neurons@meta.data$predicted_K31_named = add_paired_annotation(input_annotation = query_romanov_neurons@meta.data$predicted_K31_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K31_pruned","K31_named")])
query_romanov_neurons@meta.data$predicted_K98_named = add_paired_annotation(input_annotation = query_romanov_neurons@meta.data$predicted_K98_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K98_pruned","K98_named")])
saveRDS(query_romanov_neurons,paste0(romanov_data_path,"query_romanov_neurons.rds"))
mapscvi::plot_query_labels(query_seura_object=query_romanov_neurons,reference_seurat=neuron_map_seurat,label_col="K31_named",label_col_query = "predicted_K31_named",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=3)
library(htmltools)
library(dplyr)
library(Seurat)
library(mapscvi)
snseq_data_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/yeo_data/hypothalamus_nucSeq/mapdata/"
system(paste0("mkdir -p ",paste0(snseq_data_path)))
snseq_data_path
hypothalamus_yeo_seurat = readRDS("/beegfs/scratch/bruening_scratch/lsteuernagel/data/yeo_data/hypothalamus_nucSeq/snuc_hypo_master_211101.RDS")
colnames(hypothalamus_yeo_seurat@meta.data)
DimPlot(hypothalamus_yeo_seurat,group.by = "Cluster_IDs",label = TRUE)+NoLegend()
## need to map gene names
library(biomaRt)
library(tidyverse)
mart <- biomaRt::useMart(dataset="mmusculus_gene_ensembl",biomart='ensembl') # ,host="feb2021.archive.ensembl.org"
mouse_ensembl_gene = getBM(attributes = c('ensembl_gene_id', 'external_gene_name'),mart = mart)
matrix_genes = data.frame(ensembl_gene_id = rownames(hypothalamus_yeo_seurat@assays$RNA), sum_expression = Matrix::rowSums(hypothalamus_yeo_seurat@assays$RNA@data))
matrix_genes = dplyr::left_join(matrix_genes,mouse_ensembl_gene,by="ensembl_gene_id")
matrix_genes2 = matrix_genes %>% dplyr::mutate(new_row_name = case_when(is.na(external_gene_name) ~ ensembl_gene_id, external_gene_name == "" ~ ensembl_gene_id,TRUE ~ external_gene_name)) %>%
dplyr::group_by(new_row_name) %>% dplyr::mutate(new_row_name = case_when(sum_expression < max(sum_expression) ~ ensembl_gene_id,TRUE ~ new_row_name)) %>%
dplyr::mutate(new_row_name = case_when(duplicated(new_row_name) ~ ensembl_gene_id,TRUE ~ new_row_name)) %>% dplyr::add_count()
# update rownames of count matrix
new_RNA_matrix = hypothalamus_yeo_seurat@assays$RNA@counts
rownames(new_RNA_matrix) = matrix_genes2$new_row_name
# update metadata colnames to better fit with hypoMap
meta_new_yeo = hypothalamus_yeo_seurat@meta.data %>% # dplyr::rename(Sample_ID =Sample,Cell_ID = Barcode, )
dplyr::mutate(Sample_ID = gsub("/","",stringr::str_extract(Sample,".*[0-9]/")),
Cell_ID = paste0(Barcode,"_",Sample_ID,"_yeo"),
Batch_ID = "yeo_Batch_1",
Sex = "M",
Diet = nutr.cond)
rownames(meta_new_yeo) = meta_new_yeo$Cell_ID
# use cell id for rownames
colnames(new_RNA_matrix) = meta_new_yeo$Cell_ID
setdiff(colnames(meta_new_yeo),colnames(hypothalamus_yeo_seurat@meta.data))
# make a version with external gene names in RNA slot and no other assays to reduce size
hypothalamus_yeo_seurat_small = SeuratObject::CreateSeuratObject(counts = new_RNA_matrix,project = "snSeq_hypothalamus",meta.data = meta_new_yeo)
hypothalamus_yeo_seurat_small = NormalizeData(hypothalamus_yeo_seurat_small)
hypothalamus_yeo_seurat_small@reductions = hypothalamus_yeo_seurat@reductions
DimPlot(full_map_seurat,group.by = "Curated_Class",label = TRUE)+NoAxes()+NoLegend()
model_path = paste0(project_path,"scVI_",project_name,"_model/")
query_snseq_all = map_new_seurat_hypoMap(hypothalamus_yeo_seurat_small,
suffix="query_snseq_all",
label_col="Curated_Class",
max_epochs=30,
reference_seurat=full_map_seurat,
model_path=model_path)
query_snseq_all@meta.data$predicted_Curated_Class = query_snseq_all@meta.data$predicted
plot_query_labels(query_seura_object=query_snseq_all,reference_seurat=full_map_seurat,label_col="Curated_Class",label_col_query = "predicted_Curated_Class",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = TRUE,label.size=2)
DimPlot(neuron_map_seurat,group.by = "K14_named",label = TRUE)+NoAxes()+NoLegend()
#query_snseq_all = readRDS(paste0(snseq_data_path,"nucseq_all_map_updated.rds"))
model_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/hypoMap/hypoMap_models/hypothalamus_neurons_reference_model/"
query_snseq_neurons = map_new_seurat_hypoMap(query_snseq_all,
suffix="query_snseq_neurons",
label_col="K329_pruned", # predict cluster id of lowest level annotation
subset_col = "predicted_Curated_Class", # see chunk above
subset_values = "Neurons",
max_epochs=30,
reference_seurat=neuron_map_seurat,
inferred_sex_varname = "inferred_sex.x",
model_path=model_path)
query_snseq_neurons@meta.data$predicted_K329_pruned = query_snseq_neurons@meta.data$predicted
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K329_pruned",label_col_query = "predicted_K329_pruned",overlay = TRUE,bg_col = "grey80",query_pt_size = 0.05,labelonplot = FALSE,label.size=2)
# ,results = 'hide'
reconstructed_anno = reconstruct_levels(edgelist = neuron_map_seurat@misc$mrtree_edgelist[,1:2],input_annotation = query_snseq_neurons@meta.data$predicted_K329_pruned,level_prefix="K[0-9]+",result_prefix = "predicted_")
colnames(reconstructed_anno) = paste0(colnames(reconstructed_anno),"_pruned")# add the pruned suffix (not done by the function!)
head(reconstructed_anno)
query_snseq_neurons@meta.data = cbind(query_snseq_neurons@meta.data,reconstructed_anno)
plot_query_labels(query_seura_object=query_snseq_neurons,reference_seurat=neuron_map_seurat,label_col="K14_pruned",label_col_query ="predicted_K14_pruned" ,overlay = FALSE,query_pt_size = 0.05,labelonplot = TRUE,label.size=2.5)
query_snseq_neurons@meta.data$predicted_K4_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K4_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K4_pruned","K4_named")])
query_snseq_neurons@meta.data$predicted_K14_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K14_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K14_pruned","K14_named")])
query_snseq_neurons@meta.data$predicted_K31_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K31_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K31_pruned","K31_named")])
query_snseq_neurons@meta.data$predicted_K98_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K98_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K98_pruned","K98_named")])
query_snseq_neurons@meta.data$predicted_K169_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K169_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K169_pruned","K169_named")])
query_snseq_neurons@meta.data$predicted_K240_named = add_paired_annotation(input_annotation = query_snseq_neurons@meta.data$predicted_K240_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K240_pruned","K240_named")])
DimPlot(query_snseq_neurons,group.by = "predicted_K14_named",label = TRUE,label.size = 2)+NoLegend()+NoAxes()
saveRDS(query_snseq_all,paste0(snseq_data_path,"nucseq_all_map.rds"))
print(paste0(snseq_data_path,"nucseq_all_map.rds"))
saveRDS(query_snseq_neurons,paste0(snseq_data_path,"nucseq_neurons_map.rds"))
print(paste0(snseq_data_path,"nucseq_neurons_map.rds"))
