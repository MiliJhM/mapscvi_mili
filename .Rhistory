p1 = p1+Seurat::NoAxes()
p2 = p2+Seurat::NoAxes()
}
if(nolegend){
p1 = p1+Seurat::NoLegend()
p2 = p2+Seurat::NoLegend()
}
p_full = cowplot::plot_grid(p1,p2)
}
p_full
}
plot_query_labels_TEST(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat, bg_col = "grey80",label_col="K169_named",overlay = TRUE,
query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
plot_query_labels_TEST = function(query_seura_object,reference_seurat,label_col,label_col_query = "predicted", overlay = FALSE, bg_col = "grey80", overlay_color = "red", overlay_alpha = 0.5,query_pt_size=NULL, query_umap = "umap_scvi",reference_umap="umap_scvi",labelonplot=TRUE,noaxes=TRUE,nolegend=TRUE,...){
# check
if(is.null(reference_seurat)){stop("Please provide reference seurat with latent space, umap and metadata")}
if(! (reference_umap %in% names(reference_seurat@reductions))){stop("Cannot find '",reference_umap,"' in provided reference_seurat.") }
if(! (query_umap %in% names(query_seura_object@reductions))){ stop("Cannot find '",reference_umap,"' in provided reference_seurat.")}
if(! label_col %in% colnames(reference_seurat@meta.data)){stop("Cannot find '",label_col,"' in reference_seurat to label data.") }
# overlay mode
if(overlay){
# extract data for overlay from query
plot_data = cbind(query_seura_object@reductions[[query_umap]]@cell.embeddings,query_seura_object@meta.data)
# plot reference UMAP
p_full=DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)
# save and remove geom_text layer
if(labelonplot){
save_geom_text = p_full$layers[[2]]
p_full$layers[[2]] =NULL
}
# recreate plot if all points are bg col
if(!is.null(bg_col)){
reference_seurat$dummy = NA
print("dummy")
p_full=DimPlot(reference_seurat,group.by = "dummy")+scale_color_manual(values = bg_col,na.value=bg_col)+NoLegend()
print("gweg")
}
if(noaxes){p_full = p_full+Seurat::NoAxes()}
if(nolegend){ p_full = p_full+Seurat::NoLegend()}
# adjust alpha
p_full[[1]]$layers[[1]]$aes_params$alpha = min(overlay_alpha,1)
# get pt size
if(is.null(query_pt_size)){
pt_size = p_full[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
# plot query points on top
if(!is.null(bg_col)){
# if bg color is set we are plotting the color with the query points
# do the label_col and label_col query overlap ? then use color scale from reference
if(length(intersect(unique(query_seura_object@meta.data[,label_col_query]),unique(reference_seurat@meta.data[,label_col])))>0){
test_plot = DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap) # testplot from full data
testplot_build=ggplot_build(test_plot)$data[1][[1]] # dataframe with colors
color_mapping_df=as.data.frame(cbind(testplot_build[,"colour"],reference_seurat@meta.data[,c(label_col)])) %>% dplyr::distinct(V1,V2) # make a df with label_col and colours
print(color_mapping_df)
print("weg")
color_mapping <- as.character(color_mapping_df$V1) # convert to a named vector for scale_color_manual
names(color_mapping) <- color_mapping_df$V2
# add points to plot
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)+
scale_color_manual(values = color_mapping,na.value= bg_col)
}else{# if not use default mapping
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)
}
p_full = p_full+ggtitle(label_col_query)
}else{
# if no bg color use overlay color instead
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2]),size=pt_size,color=overlay_color)
}
# add geom_labels back
if(labelonplot){p_full$layers[[3]] = save_geom_text}
}else{
# need labels in query
if(! label_col_query %in% colnames(query_seura_object@meta.data)){
stop("Cannot find '",label_col_query,"' in query_seura_object to label data.")
}
# browser()
# side-by-side
xlims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])+0.5)
ylims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])+0.5)
p1 = Seurat::DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)+xlim(xlims)+ylim(ylims)
# get pt size
if(is.null(query_pt_size)){
pt_size = p1[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
p2 = Seurat::DimPlot(query_seura_object,group.by = label_col_query,reduction = query_umap,label = labelonplot,pt.size = pt_size,...)+xlim(xlims)+ylim(ylims)
if(noaxes){
p1 = p1+Seurat::NoAxes()
p2 = p2+Seurat::NoAxes()
}
if(nolegend){
p1 = p1+Seurat::NoLegend()
p2 = p2+Seurat::NoLegend()
}
p_full = cowplot::plot_grid(p1,p2)
}
p_full
}
plot_query_labels_TEST(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat, bg_col = "grey80",label_col="K169_named",overlay = TRUE,
query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
plot_query_labels_TEST = function(query_seura_object,reference_seurat,label_col,label_col_query = "predicted", overlay = FALSE, bg_col = "grey80", overlay_color = "red", overlay_alpha = 0.5,query_pt_size=NULL, query_umap = "umap_scvi",reference_umap="umap_scvi",labelonplot=TRUE,noaxes=TRUE,nolegend=TRUE,...){
# check
if(is.null(reference_seurat)){stop("Please provide reference seurat with latent space, umap and metadata")}
if(! (reference_umap %in% names(reference_seurat@reductions))){stop("Cannot find '",reference_umap,"' in provided reference_seurat.") }
if(! (query_umap %in% names(query_seura_object@reductions))){ stop("Cannot find '",reference_umap,"' in provided reference_seurat.")}
if(! label_col %in% colnames(reference_seurat@meta.data)){stop("Cannot find '",label_col,"' in reference_seurat to label data.") }
# overlay mode
if(overlay){
# extract data for overlay from query
plot_data = cbind(query_seura_object@reductions[[query_umap]]@cell.embeddings,query_seura_object@meta.data)
# plot reference UMAP
p_full=DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)
# save and remove geom_text layer
if(labelonplot){
save_geom_text = p_full$layers[[2]]
p_full$layers[[2]] =NULL
}
# recreate plot if all points are bg col
if(!is.null(bg_col)){
reference_seurat$dummy = NA
print("dummy")
p_full=DimPlot(reference_seurat,group.by = "dummy")+scale_color_manual(values = bg_col,na.value=bg_col)+NoLegend()
print("gweg")
}
if(noaxes){p_full = p_full+Seurat::NoAxes()}
if(nolegend){ p_full = p_full+Seurat::NoLegend()}
# adjust alpha
p_full[[1]]$layers[[1]]$aes_params$alpha = min(overlay_alpha,1)
# get pt size
if(is.null(query_pt_size)){
pt_size = p_full[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
# plot query points on top
if(!is.null(bg_col)){
# if bg color is set we are plotting the color with the query points
# do the label_col and label_col query overlap ? then use color scale from reference
if(length(intersect(unique(query_seura_object@meta.data[,label_col_query]),unique(reference_seurat@meta.data[,label_col])))>0){
print("wer2rg")
test_plot = DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap) # testplot from full data
testplot_build=ggplot_build(test_plot)$data[1][[1]] # dataframe with colors
color_mapping_df=as.data.frame(cbind(testplot_build[,"colour"],reference_seurat@meta.data[,c(label_col)])) %>% dplyr::distinct(V1,V2) # make a df with label_col and colours
print(color_mapping_df)
print("weg")
color_mapping <- as.character(color_mapping_df$V1) # convert to a named vector for scale_color_manual
names(color_mapping) <- color_mapping_df$V2
# add points to plot
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)+
scale_color_manual(values = color_mapping,na.value= bg_col)
}else{# if not use default mapping
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)
}
p_full = p_full+ggtitle(label_col_query)
}else{
# if no bg color use overlay color instead
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2]),size=pt_size,color=overlay_color)
}
# add geom_labels back
if(labelonplot){p_full$layers[[3]] = save_geom_text}
}else{
# need labels in query
if(! label_col_query %in% colnames(query_seura_object@meta.data)){
stop("Cannot find '",label_col_query,"' in query_seura_object to label data.")
}
# browser()
# side-by-side
xlims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])+0.5)
ylims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])+0.5)
p1 = Seurat::DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)+xlim(xlims)+ylim(ylims)
# get pt size
if(is.null(query_pt_size)){
pt_size = p1[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
p2 = Seurat::DimPlot(query_seura_object,group.by = label_col_query,reduction = query_umap,label = labelonplot,pt.size = pt_size,...)+xlim(xlims)+ylim(ylims)
if(noaxes){
p1 = p1+Seurat::NoAxes()
p2 = p2+Seurat::NoAxes()
}
if(nolegend){
p1 = p1+Seurat::NoLegend()
p2 = p2+Seurat::NoLegend()
}
p_full = cowplot::plot_grid(p1,p2)
}
p_full
}
plot_query_labels_TEST(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat, bg_col = "grey80",label_col="K169_named",overlay = TRUE,
query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
plot_query_labels_TEST = function(query_seura_object,reference_seurat,label_col,label_col_query = "predicted", overlay = FALSE, bg_col = "grey80", overlay_color = "red", overlay_alpha = 0.5,query_pt_size=NULL, query_umap = "umap_scvi",reference_umap="umap_scvi",labelonplot=TRUE,noaxes=TRUE,nolegend=TRUE,...){
# check
if(is.null(reference_seurat)){stop("Please provide reference seurat with latent space, umap and metadata")}
if(! (reference_umap %in% names(reference_seurat@reductions))){stop("Cannot find '",reference_umap,"' in provided reference_seurat.") }
if(! (query_umap %in% names(query_seura_object@reductions))){ stop("Cannot find '",reference_umap,"' in provided reference_seurat.")}
if(! label_col %in% colnames(reference_seurat@meta.data)){stop("Cannot find '",label_col,"' in reference_seurat to label data.") }
# overlay mode
if(overlay){
# extract data for overlay from query
plot_data = cbind(query_seura_object@reductions[[query_umap]]@cell.embeddings,query_seura_object@meta.data)
# plot reference UMAP
p_full=DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)
# save and remove geom_text layer
if(labelonplot){
save_geom_text = p_full$layers[[2]]
p_full$layers[[2]] =NULL
}
# recreate plot if all points are bg col
if(!is.null(bg_col)){
reference_seurat$dummy = NA
print("dummy")
p_full=DimPlot(reference_seurat,group.by = "dummy")+scale_color_manual(values = bg_col,na.value=bg_col)+NoLegend()
print("gweg")
}
if(noaxes){p_full = p_full+Seurat::NoAxes()}
if(nolegend){ p_full = p_full+Seurat::NoLegend()}
print("lizlö")
# adjust alpha
p_full[[1]]$layers[[1]]$aes_params$alpha = min(overlay_alpha,1)
print("6ujt")
# get pt size
if(is.null(query_pt_size)){
pt_size = p_full[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
# plot query points on top
if(!is.null(bg_col)){
# if bg color is set we are plotting the color with the query points
# do the label_col and label_col query overlap ? then use color scale from reference
if(length(intersect(unique(query_seura_object@meta.data[,label_col_query]),unique(reference_seurat@meta.data[,label_col])))>0){
print("wer2rg")
test_plot = DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap) # testplot from full data
testplot_build=ggplot_build(test_plot)$data[1][[1]] # dataframe with colors
color_mapping_df=as.data.frame(cbind(testplot_build[,"colour"],reference_seurat@meta.data[,c(label_col)])) %>% dplyr::distinct(V1,V2) # make a df with label_col and colours
print(color_mapping_df)
print("weg")
color_mapping <- as.character(color_mapping_df$V1) # convert to a named vector for scale_color_manual
names(color_mapping) <- color_mapping_df$V2
# add points to plot
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)+
scale_color_manual(values = color_mapping,na.value= bg_col)
}else{# if not use default mapping
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)
}
p_full = p_full+ggtitle(label_col_query)
}else{
# if no bg color use overlay color instead
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2]),size=pt_size,color=overlay_color)
}
# add geom_labels back
if(labelonplot){p_full$layers[[3]] = save_geom_text}
}else{
# need labels in query
if(! label_col_query %in% colnames(query_seura_object@meta.data)){
stop("Cannot find '",label_col_query,"' in query_seura_object to label data.")
}
# browser()
# side-by-side
xlims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])+0.5)
ylims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])+0.5)
p1 = Seurat::DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)+xlim(xlims)+ylim(ylims)
# get pt size
if(is.null(query_pt_size)){
pt_size = p1[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
p2 = Seurat::DimPlot(query_seura_object,group.by = label_col_query,reduction = query_umap,label = labelonplot,pt.size = pt_size,...)+xlim(xlims)+ylim(ylims)
if(noaxes){
p1 = p1+Seurat::NoAxes()
p2 = p2+Seurat::NoAxes()
}
if(nolegend){
p1 = p1+Seurat::NoLegend()
p2 = p2+Seurat::NoLegend()
}
p_full = cowplot::plot_grid(p1,p2)
}
p_full
}
plot_query_labels_TEST(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat, bg_col = "grey80",label_col="K169_named",overlay = TRUE,
query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
plot_query_labels_TEST = function(query_seura_object,reference_seurat,label_col,label_col_query = "predicted", overlay = FALSE, bg_col = "grey80", overlay_color = "red", overlay_alpha = 0.5,query_pt_size=NULL, query_umap = "umap_scvi",reference_umap="umap_scvi",labelonplot=TRUE,noaxes=TRUE,nolegend=TRUE,...){
# check
if(is.null(reference_seurat)){stop("Please provide reference seurat with latent space, umap and metadata")}
if(! (reference_umap %in% names(reference_seurat@reductions))){stop("Cannot find '",reference_umap,"' in provided reference_seurat.") }
if(! (query_umap %in% names(query_seura_object@reductions))){ stop("Cannot find '",reference_umap,"' in provided reference_seurat.")}
if(! label_col %in% colnames(reference_seurat@meta.data)){stop("Cannot find '",label_col,"' in reference_seurat to label data.") }
# overlay mode
if(overlay){
# extract data for overlay from query
plot_data = cbind(query_seura_object@reductions[[query_umap]]@cell.embeddings,query_seura_object@meta.data)
# plot reference UMAP
p_full=DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)
# save and remove geom_text layer
if(labelonplot){
save_geom_text = p_full$layers[[2]]
p_full$layers[[2]] =NULL
}
# recreate plot if all points are bg col
if(!is.null(bg_col)){
reference_seurat$dummy = NA
print("dummy")
p_full=DimPlot(reference_seurat,group.by = "dummy")+scale_color_manual(values = bg_col,na.value=bg_col)+NoLegend()
print("gweg")
}
if(noaxes){p_full = p_full+Seurat::NoAxes()}
if(nolegend){ p_full = p_full+Seurat::NoLegend()}
print("lizlö")
# adjust alpha
p_full[[1]]$layers[[1]]$aes_params$alpha = min(overlay_alpha,1)
print("6ujt")
# get pt size
if(is.null(query_pt_size)){
pt_size = p_full[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
print("6ujhjt")
# plot query points on top
if(!is.null(bg_col)){
# if bg color is set we are plotting the color with the query points
# do the label_col and label_col query overlap ? then use color scale from reference
if(length(intersect(unique(query_seura_object@meta.data[,label_col_query]),unique(reference_seurat@meta.data[,label_col])))>0){
print("wer2rg")
test_plot = DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap) # testplot from full data
testplot_build=ggplot_build(test_plot)$data[1][[1]] # dataframe with colors
color_mapping_df=as.data.frame(cbind(testplot_build[,"colour"],reference_seurat@meta.data[,c(label_col)])) %>% dplyr::distinct(V1,V2) # make a df with label_col and colours
print(color_mapping_df)
print("weg")
color_mapping <- as.character(color_mapping_df$V1) # convert to a named vector for scale_color_manual
names(color_mapping) <- color_mapping_df$V2
# add points to plot
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)+
scale_color_manual(values = color_mapping,na.value= bg_col)
}else{# if not use default mapping
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2],color=label_col_query),size=pt_size)
}
p_full = p_full+ggtitle(label_col_query)
}else{
# if no bg color use overlay color instead
p_full=p_full+ggplot2::geom_point(data=plot_data,ggplot2::aes_string(x=colnames(plot_data)[1],y=colnames(plot_data)[2]),size=pt_size,color=overlay_color)
}
# add geom_labels back
if(labelonplot){p_full$layers[[3]] = save_geom_text}
}else{
# need labels in query
if(! label_col_query %in% colnames(query_seura_object@meta.data)){
stop("Cannot find '",label_col_query,"' in query_seura_object to label data.")
}
# browser()
# side-by-side
xlims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,1])+0.5)
ylims = c(min(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])-0.5,max(reference_seurat@reductions[[reference_umap]]@cell.embeddings[,2])+0.5)
p1 = Seurat::DimPlot(reference_seurat,group.by = label_col,reduction = reference_umap,label = labelonplot,...)+xlim(xlims)+ylim(ylims)
# get pt size
if(is.null(query_pt_size)){
pt_size = p1[[1]]$layers[[1]]$aes_params$size
}else{
pt_size = query_pt_size
}
p2 = Seurat::DimPlot(query_seura_object,group.by = label_col_query,reduction = query_umap,label = labelonplot,pt.size = pt_size,...)+xlim(xlims)+ylim(ylims)
if(noaxes){
p1 = p1+Seurat::NoAxes()
p2 = p2+Seurat::NoAxes()
}
if(nolegend){
p1 = p1+Seurat::NoLegend()
p2 = p2+Seurat::NoLegend()
}
p_full = cowplot::plot_grid(p1,p2)
}
p_full
}
plot_query_labels_TEST(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat, bg_col = "grey80",label_col="K169_named",overlay = TRUE,
query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
a1=lamanno_seurat_object@meta.data
View(a1)
a2=neuron_map_seurat@meta.data
View(a2)
cluster_labels = neuron_map_seurat@meta.data$K169_named
reference_reduction = "scvi"
lamanno_seurat_object = project_query(query_seurat_object = lamanno_seurat_object,
reference_map_reduc = neuron_map_seurat@reductions[[reference_reduction]],
reference_map_umap = neuron_map_seurat@reductions[[paste0("umap_",reference_reduction)]],
query_reduction = "scvi",
label_vec =cluster_labels)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = FALSE,labelonplot = FALSE)
plot_query_labels(query_seura_object=lamanno_seurat_object,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = FALSE,label.size=1)
head(sort(table(lamanno_seurat_object@meta.data$predicted),decreasing = TRUE),n = 10)
build_readme()
query_romanov_neurons = map_new_seurat_hypoMap(mapscvi::query_romanov,reference_mode = "hypoMap_neurons",reference_seurat = neuron_map_seurat, suffix="query_romanov_neurons",max_epochs=20)
a1=mapscvi::query_romanov
a1 <- Seurat::NormalizeData(object = a1,assay = "RNA", verbose = F,
normalization.method = "LogNormalize",scale.factor = 10000)
dim(a1@assays$RNA)
dim(a1@assays$RNA@counts)
dim(a1@assays$RNA@data)
a1@assays$RNA@data=NULL
a1@data =NULL
dummy=matrix(data = as.numeric())
a1 <- SetAssayData(object = a1, slot = "data", new.data = dummy)
#suffix ="mapped_data_yeo_romanov" # a name
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = reference_hypoMap_full@assays$RNA@counts@Dim, dimnames = reference_hypoMap_full@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
SetAssayData(object = query_romanov, slot = "scale.data", new.data = dummy)
print(object.size(query_romanov) / 1000000)
## load romanov query
#suffix ="mapped_data_yeo_romanov" # a name
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
query_romanov = SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
SetAssayData(object = query_romanov, slot = "scale.data", new.data = dummy)
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
?SetAssayData
a3=query_romanov[["RNA"]]
query_romanov[["RNA"]] = SetAssayData(object = query_romanov[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov[["RNA"]] = SetAssayData(object = query_romanov[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov2 = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov2@reductions = list()
query_romanov2@meta.data = query_romanov2@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = NULL)
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = empty_matrix)
query_romanov_clean = CreateAssayObject(counts = query_romanov2@assays$RNA@counts,meta.data=query_romanov2@meta.data)
query_romanov_clean=NormalizeData(query_romanov_clean)
query_romanov3=NormalizeData(query_romanov3)
query_romanov3 = query_romanov2
query_romanov3=NormalizeData(query_romanov3)
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "scale.data", new.data = dummy)
print(object.size(query_romanov3) / 1000000)
query_romanov3[["RNA"]]@scale.data = dummy
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]]@scale.data = dummy
print(object.size(query_romanov3) / 1000000)
query_romanov3=NormalizeData(query_romanov3)
query_romanov3 = query_romanov2
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov3@assays$RNA@counts@Dim, dimnames = query_romanov3@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
#query_romanov3[["RNA"]] = SetAssayData(object = query_romanov3[["RNA"]], slot = "data", new.data = empty_matrix)
query_romanov3 = SetAssayData(object = query_romanov3, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov3[["RNA"]]@scale.data = dummy
print(object.size(query_romanov3) / 1000000)
query_romanov3=NormalizeData(query_romanov3)
query_romanov_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/mapped_data_Romanov_neurons/mapped_data_Romanov_neurons.h5Seurat" # seurat object to load
query_romanov = SeuratDisk::LoadH5Seurat(query_romanov_path)
query_romanov@reductions = list()
query_romanov@meta.data = query_romanov@meta.data[,1:20]
# overwrite other slots with empty dummy matrix
empty_matrix <- Matrix::sparseMatrix(i = integer(0), j = integer(0), dims = query_romanov@assays$RNA@counts@Dim, dimnames = query_romanov@assays$RNA@counts@Dimnames)
empty_matrix <- as(empty_matrix, "dgCMatrix")
query_romanov = SetAssayData(object = query_romanov, slot = "data", new.data = empty_matrix)
dummy=matrix(data = as.numeric())
query_romanov[["RNA"]]@scale.data = dummy
print(object.size(query_romanov) / 1000000)
#save testdata
#save testdata
save(query_romanov,file = "/beegfs/scratch/bruening_scratch/lsteuernagel/projects/mapscvi/data/query_romanov.RData")
load_all()
document()
build_readme()
build_readme()
