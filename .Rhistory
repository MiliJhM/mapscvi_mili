DimPlot(nts_ludwig_seurat,group.by = "Author_Class")
FeaturePlot(nts_ludwig_seurat,features =  "Spint2")
FeaturePlot(nts_ludwig_seurat,features =  "Cul4b")
head(nts_hvgs,n = 40)
FeaturePlot(nts_ludwig_seurat,features =  "Nfia")
FeaturePlot(nts_ludwig_seurat,features =  "Oxr1")
FeaturePlot(nts_ludwig_seurat,features =  "Gpc5")
FeaturePlot(nts_ludwig_seurat,features =  "Ddr2")
nts_hvgs = nts_ludwig_neurons_seurat@misc$var_features$RNA.log.vst.split_Sample_ID.features.1000
npcs_PCA= 20
seed=1234
set.seed(seed)
query_juliet_custom = subset(query_juliet,subset = nFeature_RNA > 1000)
query_juliet_custom<- NormalizeData(object = query_juliet_custom, verbose = F,assay="RNA")
#query_juliet_custom <- FindVariableFeatures(object = query_juliet_custom,assay="RNA", selection.method = "vst", nfeatures = 1000, verbose = F)
# ignore mt and rpl/s genes in hvg
clean_hvg=TRUE
if(clean_hvg){
assay="RNA"
idx = grep("mt-|Rpl|Rps",query_juliet_custom@assays[[assay]]@var.features)
if(length(idx)>0){
print(paste0("Ignoring ",length(idx)," rp and mt genes in hvgs.."))
query_juliet_custom@assays[[assay]]@var.features = query_juliet_custom@assays[[assay]]@var.features[-idx]
query_juliet_custom@assays[[assay]]@meta.features$vst.variable[idx] = FALSE
}
}
key = "pca"
query_juliet_custom <- ScaleData(object = query_juliet_custom,assay=assay, verbose = F)
query_juliet_custom <- RunPCA(object = query_juliet_custom,assay=assay, npcs = npcs_PCA,reduction.name = key,reduction.key=key, verbose = F,seed.use = seed,features = nts_hvgs)
if(key=="pca"){umap_key="umap"}else{umap_key=paste0("umap_",key)}
query_juliet_custom <- RunUMAP(object = query_juliet_custom,assay=assay, reduction = key,reduction.name=umap_key,reduction.key=umap_key, dims = 1:npcs_PCA,verbose = F,seed.use = seed)
query_juliet_custom <- FindNeighbors(query_juliet_custom,reduction = key, dims = 1:npcs_PCA,verbose = F)
query_juliet_custom <- FindClusters(query_juliet_custom, resolution = clusterRes,verbose = F,random.seed = seed)
query_juliet_custom <- FindClusters(query_juliet_custom, resolution = 2,verbose = F,random.seed = seed)
query_juliet_custom <- FindNeighbors(query_juliet_custom,reduction = key, dims = 1:npcs_PCA,verbose = F)
query_juliet_custom <- FindClusters(query_juliet_custom, resolution = 2,verbose = F,random.seed = seed)
query_juliet_custom <- FindClusters(object = query_juliet_custom, resolution = 2,verbose = F,random.seed = seed)
query_juliet_custom <- FindClusters(object = query_juliet_custom, resolution = 1,verbose = F,random.seed = seed)
ElbowPlot(query_juliet_standard)
query_juliet_custom <- FindNeighbors(query_juliet_custom,reduction = key, dims = 1:npcs_PCA,verbose = F)
query_juliet_custom <- FindClusters(object = query_juliet_custom, resolution = 1,verbose = F,random.seed = seed)
ElbowPlot(query_juliet_custom)
DimPlot(query_juliet_custom,group.by = "seurat_clusters",reduction = "pca")
DimPlot(query_juliet_custom,group.by = "seurat_clusters")
DimHeatmap(query_juliet_standard, dims = 1:2, balanced = TRUE,reduction="pca",cells=41,fast=F,ncol=2)
"Cetn3" %in% nts_hvgs
?DimHeatmap
DimHeatmap(query_juliet_custom, dims = 1:2, balanced = TRUE,reduction="pca",cells=41,fast=F,ncol=2)
"Gal" %in% nts_hvgs
FeaturePlot(nts_ludwig_seurat,features =  "Gal")
FeaturePlot(query_juliet_custom,features = "nFeature_RNA")
FeaturePlot(query_juliet_custom,features = "rpl_signature_expr_median")
FeaturePlot(query_juliet_custom,features = "Gal")
FeaturePlot(query_juliet_custom,features = "Gpc5")
FeaturePlot(query_juliet_custom,features = "Slit3")
FeaturePlot(nts_ludwig_seurat,features =  "Slit3")
FeaturePlot(nts_ludwig_seurat,features =  "Carnmt1")
FeaturePlot(nts_ludwig_seurat,features =  "Nxph1")
FeaturePlot(nts_ludwig_seurat,features =  "Msh5")
head(nts_hvgs,n = 140)
FeaturePlot(nts_ludwig_seurat,features =  "Elavl2")
FeaturePlot(nts_ludwig_seurat,features =  "Prr16")
FeaturePlot(nts_ludwig_seurat,features =  "Stambp")
FeaturePlot(nts_ludwig_seurat,features =  "Npl")
FeaturePlot(nts_ludwig_seurat,features =  "Htr2c")
FeaturePlot(query_juliet_custom,features = "Htr2c")
cluster::silhouette
?cluster::silhouette
FeaturePlot(neuron_map_seurat,features = "Nkx2-1")
FeaturePlot(neuron_map_seurat,features = "Cers6")
FeaturePlot(neuron_map_seurat,features = "Lepr")
AverageExpression
?AverageExpression
dim(neuron_map_seurat@reductions$scvi@cell.embeddings)
## get average of each cluster
a1=sapply(unique(neuron_map_seurat@meta.data$K329_pruned),function(x,labels,matrix){
idx = which(labels == x)
clustermean = apply(matrix[idx,],2,mean)
clustermean
},simplify = FALSE,labels = neuron_map_seurat@meta.data$K329_pruned,matrix = neuron_map_seurat@reductions$scvi@cell.embeddings)
## get average of each cluster
a1=sapply(unique(neuron_map_seurat@meta.data$K329_pruned),function(x,labels,matrix){
idx = which(labels == x)
clustermean = apply(matrix[idx,],2,mean)
clustermean
},simplify = TRUE,labels = neuron_map_seurat@meta.data$K329_pruned,matrix = neuron_map_seurat@reductions$scvi@cell.embeddings)
View(a1)
## get average of each cluster
reference_cluster_centroids=sapply(unique(neuron_map_seurat@meta.data$K329_pruned),function(x,labels,matrix){
idx = which(labels == x)
clustermean = apply(matrix[idx,],2,mean)
clustermean
},simplify = TRUE,labels = neuron_map_seurat@meta.data$K329_pruned,matrix = neuron_map_seurat@reductions$scvi@cell.embeddings)
## get average of each cluster
reference_cluster_centroids=t(sapply(unique(neuron_map_seurat@meta.data$K329_pruned),function(x,labels,matrix){
idx = which(labels == x)
clustermean = apply(matrix[idx,],2,mean)
clustermean
},simplify = TRUE,labels = neuron_map_seurat@meta.data$K329_pruned,matrix = neuron_map_seurat@reductions$scvi@cell.embeddings))
View(reference_cluster_centroids)
dim(query_snseq_neurons@reductions$scvi@cell.embeddings)
dim(centers)
dim(reference_cluster_centroids)
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:20]), function(x){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings , labels = query_snseq_neurons@meta.data$predicted_K329_pruned, centers = reference_cluster_centroids)
matrix = query_snseq_neurons@reductions$scvi@cell.embeddings
labels = query_snseq_neurons@meta.data$predicted_K329_pruned
centers = reference_cluster_centroids
x=2
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2))
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:20])
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:20]), function(x,matrix,labels){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:20]), function(x,matrix,labels,centers){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
a1
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:200]), function(x,matrix,labels,centers){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned[1:2000]), function(x,matrix,labels,centers){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
a1=sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned), function(x,matrix,labels,centers){
ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
hist(a1)
query_snseq_neurons@meta.data$dist_to_cluster = a1
FeaturePlot(query_snseq_neurons,"dist_to_cluster")
dim(centers)
matrix = query_snseq_neurons@reductions$scvi@cell.embeddings
labels = query_snseq_neurons@meta.data$predicted_K329_pruned
centers = reference_cluster_centroids
x=1
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
labels[x]
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances)
sil_width  = (assigned_cluster_dist - nearest_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
(assigned_cluster_dist - nearest_cluster_dist)
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
nearest_cluster_dist = min(cluster_distances[!labels[x]])
nearest_cluster_dist = min(cluster_distances[-labels[x]])
labels[x]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
length(cluster_distances[! names(cluster_distances) == labels[x]])
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
x=5
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
## calculate asw:
silhouette_width = sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned)[1:20], function(x,matrix,labels,centers){
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
silhouette_width
query_snseq_neurons@meta.data$predicted_K329_pruned[1.20]
query_snseq_neurons@meta.data$predicted_K329_pruned[1:20]
## calculate asw:
silhouette_width = sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned)[1:200], function(x,matrix,labels,centers){
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
## calculate asw:
silhouette_width = sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned), function(x,matrix,labels,centers){
#ref_vector = reference_cluster_centroids[labels[x],]
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
## calculate asw:
silhouette_width = sapply(seq_along(query_snseq_neurons@meta.data$predicted_K329_pruned), function(x,matrix,labels,centers){
#ref_vector = reference_cluster_centroids[labels[x],]
if(x%%1000 == 0) print(x)
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
},matrix = query_snseq_neurons@reductions$scvi@cell.embeddings ,
labels = query_snseq_neurons@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
## plot
query_snseq_neurons@meta.data$silhouette_width = silhouette_width
FeaturePlot(query_snseq_neurons,"silhouette_width")+scale_color_gradient2()
FeaturePlot(query_snseq_neurons,"silhouette_width")+scale_color_gradient2(mid = "grey")
colnames(query_snseq_neurons@meta.data)
#knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(eval = FALSE)
query_snseq_neurons = check_reference_markers_per_cell(query_seurat_object=query_snseq_neurons,
marker_genes=marker_genes,
query_label_col="predicted_K329_pruned")
FeaturePlot(query_snseq_neurons,"marker_pct")+scale_color_gradient2(mid = "grey")
plot(query_snseq_neurons@meta.data$silhouette_width,query_snseq_neurons@meta.data$marker_pct)
silhouette_width_save = silhouette_width
FeaturePlot(query_snseq_neurons,"silhouette_width")+scale_color_gradient2(mid = "grey")
FeaturePlot(query_snseq_neurons,"dist_to_cluster")
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(K329_pruned) %>% dplyr::summarise(mean(K329_pruned))
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::summarise(mean(K329_pruned))
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::summarise(mean(predicted_K329_pruned))
View(a1)
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::summarise(mean(silhouette_width))
View(a1)
View(anno_df)
?FeaturePlot
a22 = subset(query_snseq_neurons, subset = predicted_K329_pruned == "K329-52")
FeaturePlot(a22,"silhouette_width")+scale_color_gradient2(mid = "grey",)
FeaturePlot(query_snseq_neurons,"silhouette_width")+scale_color_gradient2(mid = "grey")
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count() %>% dplyr::summarise(mean(silhouette_width))
View(a1)
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>% dplyr::summarise(mean(silhouette_width))
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>% dplyr::mutate(mean(silhouette_width))
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>% dplyr::mutate(meansw = mean(silhouette_width))
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>% dplyr::mutate(meansw = mean(silhouette_width)) %>% dplyr::distinct(predicted_K329_pruned,meansw,meansw)
View(a1)
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>%
dplyr::mutate(meansw = mean(silhouette_width)) %>% dplyr::distinct(predicted_K329_pruned,meansw,n_cells)
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>%
dplyr::mutate(meansw = mean(silhouette_width)) %>% dplyr::distinct(predicted_K329_pruned,meansw,n_cells)
a22 = subset(query_snseq_neurons, subset = predicted_K329_pruned == "K329-111")
FeaturePlot(a22,"silhouette_width")+scale_color_gradient2(mid = "grey",)
DimPlot(a22,"silhouette_width",cells.highlight = a22@meta.data$Cell_ID)
DimPlot(a22,"silhouette_width",cells.highlight = a22@meta.data$Cell_ID)
a1= query_snseq_neurons@meta.data %>% dplyr::group_by(predicted_K329_pruned) %>% dplyr::add_count(name="n_cells") %>%
dplyr::mutate(meansw = mean(silhouette_width)) %>% dplyr::distinct(predicted_K329_pruned,meansw,n_cells)
a22 = subset(query_snseq_neurons, subset = predicted_K329_pruned == "K329-111")
DimPlot(a22,"silhouette_width",cells.highlight = a22@meta.data$Cell_ID)
a22@meta.data$Cell_ID
DimPlot(a22,cells.highlight = a22@meta.data$Cell_ID)
DimPlot(query_snseq_neurons,cells.highlight = a22@meta.data$Cell_ID)
a1$predicted_K329_named = add_paired_annotation(input_annotation =a1$predicted_K329_pruned,reference_annotations = neuron_map_seurat@meta.data[,c("K329_pruned","K329_named")])
a22 = subset(query_snseq_neurons, subset = predicted_K329_pruned == "K329-24")
FeaturePlot(a22,"silhouette_width")+scale_color_gradient2(mid = "grey",)
require(mapscvi)
## load data
hippocampus_bakulski_seurat = readRDS("/beegfs/scratch/bruening_scratch/lsteuernagel/data/hippocampus/bakulski/hippocampus_bakulski_seurat_310720.rds")
## load ref
load("/beegfs/scratch/bruening_scratch/lsteuernagel/data/tmp_mapscvi/reference_hypoMap.RData")
## model
map_name = "hypothalamus_neurons_reference"
map_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/"
model_path = paste0(map_path,map_name,"_model/")
## map
hippocampus_bakulski_seurat = map_new_seurat_hypoMap(hippocampus_bakulski_seurat,
suffix="query_hippocampus",
label_col="K329_pruned", # predict cluster id of lowest level annotation
max_epochs=30,
reference_seurat=reference_hypoMap,
model_path=model_path)
## overwrite
hippocampus_bakulski_seurat@meta.data$predicted_K329_pruned = hippocampus_bakulski_seurat@meta.data$predicted
## calculate asw:
silhouette_width = sapply(seq_along(hippocampus_bakulski_seurat@meta.data$predicted_K329_pruned), function(x,matrix,labels,centers){
#ref_vector = reference_cluster_centroids[labels[x],]
if(x%%1000 == 0) print(x)
q_vector = matrix[x,]
cluster_distances = apply(centers,1,function(ref_vector,q_vector){
return(1 - ( sum(ref_vector*q_vector)/sqrt(sum(ref_vector^2)*sum(q_vector^2)) ))
}, q_vector = q_vector)
assigned_cluster_dist = cluster_distances[labels[x]]
nearest_cluster_dist = min(cluster_distances[! names(cluster_distances) == labels[x]])
sil_width  = (nearest_cluster_dist - assigned_cluster_dist) / max(assigned_cluster_dist,nearest_cluster_dist)
},matrix = hippocampus_bakulski_seurat@reductions$scvi@cell.embeddings ,
labels = hippocampus_bakulski_seurat@meta.data$predicted_K329_pruned,
centers = reference_cluster_centroids)
hippocampus_bakulski_seurat@meta.data$silhouette_width = silhouette_width
FeaturePlot(hippocampus_bakulski_seurat,"silhouette_width")+scale_color_gradient2(mid = "grey")
plot_query_labels(query_seura_object=hippocampus_bakulski_seurat,reference_seurat=neuron_map_seurat,label_col="K31_named",overlay = TRUE,query_pt_size = 0.05,labelonplot = TRUE,label.size=2.5,overlay_color = "orange")
###
hippocampus_bakulski_seurat_custom = hippocampus_bakulski_seurat
###
hippocampus_bakulski_seurat_custom = hippocampus_bakulski_seurat
hippocampus_bakulski_seurat_custom = seurat_recipe(hippocampus_bakulski_seurat_custom,normalize_data = TRUE,assay = "RNA",
nfeatures_vst = 1500,clean_hvg = TRUE,npcs_PCA = 50,calcUMAP = TRUE,seed = 12345,findClusters = TRUE,clusterRes = 2)
DimPlot(hippocampus_bakulski_seurat_custom,group.by = "seurat_clusters")
DimPlot(hippocampus_bakulski_seurat_custom,group.by = "seurat_clusters",reduction="umap")
colnames(hippocampus_bakulski_seurat_custom@meta.data)
DimPlot(hippocampus_bakulski_seurat_custom,group.by = "Author_Class",reduction="umap")
FeaturePlot(hippocampus_bakulski_seurat,"silhouette_width")+scale_color_gradient2(mid = "grey")
shiny::runApp('/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scShiny-Dev')
runApp('/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scShiny-Dev')
detach("package:shinyWidgets", unload = TRUE)
devtools::install_github("dreamRs/shinyWidgets")
library(shinyWidgets)
runApp('/beegfs/scratch/bruening_scratch/lsteuernagel/projects/scShiny-Dev')
install.packages("shiny")
library(devtools)
document()
require(mapscvi)
#knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_chunk$set(eval = FALSE)
map_name = "hypothalamus_neurons_reference"
map_path = "/beegfs/scratch/bruening_scratch/lsteuernagel/data/scHarmonize/hypothalamusMapNeurons_v4/harmonization_results/hypothalamus_neurons_reference/"
map_seurat_path = paste0(map_path,map_name,".h5Seurat")
neuron_map_seurat = SeuratDisk::LoadH5Seurat(map_seurat_path)
edgelist =  neuron_map_seurat@misc$pruned_edgelist
leaf_level = 6
metadata = neuron_map_seurat@meta.data
level_pattern = "K[0-9]+"
cluster_id_pattern = "_pruned"
cluster_name_pattern = "_named"
anno_df=NULL
heatmap_data = metadata %>% dplyr::select(Cell_ID,K169_named) %>% dplyr::group_by(K169_named) %>%  #dplyr::filter(predicted_Campbell!="NA")
dplyr::add_count(name = "presence") %>% dplyr::distinct(K169_named,.keep_all=TRUE) %>%dplyr::ungroup() %>% dplyr::mutate(presence = presence / sum(presence)*100) %>% dplyr::ungroup()# %>% #%>%  dplyr::left_join(tree_data_tibble[,c("label","node")],by=c("K169"="label"))
# tidyr::spread(key = 1,value=presence)
heatmap_data = heatmap_data %>% dplyr::full_join(anno_df[,c("cluster_id","cluster_name")],by=c("K169_named"="cluster_name"))  %>% dplyr::filter(grepl("K169",cluster_id))
# construct a dataframe with the required annotations
if(is.null(anno_df)){
if(is.null(metadata)){
warning("Error: Please provide metadata with corresponding cluster ids and names that match provided edgelist")
return(NULL)
}
if(!any(grepl(cluster_id_pattern,colnames(metadata)))){
warning("Error: Cannot find columns with cluster_id_pattern '",cluster_id_pattern,"' in provided metadata")
return(NULL)
}
if(!any(grepl(cluster_name_pattern,colnames(metadata)))){
warning("Error: Cannot find columns with cluster_name_pattern '",cluster_name_pattern,"' in provided metadata")
return(NULL)
}
# anno_df: cluster id, clean_names, clusterlevel, ncells, first_cluster_name
pruned_ids =metadata[,c("Cell_ID",colnames(metadata)[grepl(cluster_id_pattern,colnames(metadata))])] %>%
tidyr::gather(-Cell_ID,key="colname",value="id") %>% dplyr::mutate(clusterlevel = str_extract(colname,level_pattern)) %>% dplyr::distinct(id,clusterlevel,.keep_all=TRUE)
named_ids =metadata[,c("Cell_ID",colnames(metadata)[grepl(cluster_name_pattern,colnames(metadata))])] %>%
tidyr::gather(-Cell_ID,key="colname",value="id") %>% dplyr::mutate(clusterlevel = str_extract(colname,level_pattern))  %>% dplyr::distinct(id,clusterlevel,.keep_all=TRUE)
both_map = dplyr::left_join(pruned_ids,named_ids,by=c("Cell_ID"="Cell_ID","clusterlevel"="clusterlevel")) %>% dplyr::select(cluster_id = id.x,cluster_name = id.y)
anno_df = neuron_map_seurat@misc$pruned_edgelist %>% dplyr::select(cluster_id = to, clusterlevel = clusterlevel,ncells ) %>% dplyr::left_join(both_map,by="cluster_id")
anno_df$first_cluster_name = sapply(anno_df$cluster_name,function(x){strsplit(x,"\\.")[[1]][length(strsplit(x,"\\.")[[1]])]})
}else{
# check that provided anno_df is valid:
if(length(setdiff(c("cluster_id","clusterlevel","cluster_name","first_cluster_name"),colnames(anno_df)))>0){
stop("Wrong anno_df format. Required columns: cluster_id, clusterlevel, cluster_name, first_cluster_name")
}
}
# load for tests:
# edgelist =  neuron_map_seurat@misc$pruned_edgelist
# leaf_level = 6
# metadata = neuron_map_seurat@meta.data
# level_pattern = "K[0-9]+"
# cluster_id_pattern = "_pruned"
# cluster_name_pattern = "_named"
# anno_df=NULL
heatmap_data = metadata %>% dplyr::select(Cell_ID,K169_named) %>% dplyr::group_by(K169_named) %>%  #dplyr::filter(predicted_Campbell!="NA")
dplyr::add_count(name = "presence") %>% dplyr::distinct(K169_named,.keep_all=TRUE) %>%dplyr::ungroup() %>% dplyr::mutate(presence = presence / sum(presence)*100) %>% dplyr::ungroup()# %>% #%>%  dplyr::left_join(tree_data_tibble[,c("label","node")],by=c("K169"="label"))
# tidyr::spread(key = 1,value=presence)
heatmap_data = heatmap_data %>% dplyr::full_join(anno_df[,c("cluster_id","cluster_name")],by=c("K169_named"="cluster_name"))  %>% dplyr::filter(grepl("K169",cluster_id))
heatmap_matrix = as.matrix(heatmap_data[,"presence"])
rownames(heatmap_matrix) = heatmap_data$cluster_id
heatmap_matrix[is.na(heatmap_matrix)] = 0
# optional use of packages: ggtree imports also tidytree and treeio!
if (!requireNamespace("ggtree", quietly = TRUE)) {
warning("The ggtree package must be installed to use this function")
return(NULL)
}
# optional use of packages: ggtree imports also tidytree and treeio!
if (!requireNamespace("ggtree", quietly = TRUE)) {
warning("The ggtree package must be installed to use this function")
return(NULL)
}
if (!requireNamespace("igraph", quietly = TRUE)) {
warning("The igraph package must be installed to use this function")
return(NULL)
}
# check that req columns exist
if(length(setdiff(c("from","to","level"),colnames(edgelist)))>0){
warning("Error: Wrong edgelist format. Requires columns: from, to, level")
return(NULL)
}
# check that leaf_level is there
if(!leaf_level %in% edgelist$level){
warning("Error: leaf_level '",leaf_level,"' cannot be found in level column of edgelist")
return(NULL)
}
# construct a dataframe with the required annotations
if(is.null(anno_df)){
if(is.null(metadata)){
warning("Error: Please provide metadata with corresponding cluster ids and names that match provided edgelist")
return(NULL)
}
if(!any(grepl(cluster_id_pattern,colnames(metadata)))){
warning("Error: Cannot find columns with cluster_id_pattern '",cluster_id_pattern,"' in provided metadata")
return(NULL)
}
if(!any(grepl(cluster_name_pattern,colnames(metadata)))){
warning("Error: Cannot find columns with cluster_name_pattern '",cluster_name_pattern,"' in provided metadata")
return(NULL)
}
# anno_df: cluster id, clean_names, clusterlevel, ncells, first_cluster_name
pruned_ids =metadata[,c("Cell_ID",colnames(metadata)[grepl(cluster_id_pattern,colnames(metadata))])] %>%
tidyr::gather(-Cell_ID,key="colname",value="id") %>% dplyr::mutate(clusterlevel = str_extract(colname,level_pattern)) %>% dplyr::distinct(id,clusterlevel,.keep_all=TRUE)
named_ids =metadata[,c("Cell_ID",colnames(metadata)[grepl(cluster_name_pattern,colnames(metadata))])] %>%
tidyr::gather(-Cell_ID,key="colname",value="id") %>% dplyr::mutate(clusterlevel = str_extract(colname,level_pattern))  %>% dplyr::distinct(id,clusterlevel,.keep_all=TRUE)
both_map = dplyr::left_join(pruned_ids,named_ids,by=c("Cell_ID"="Cell_ID","clusterlevel"="clusterlevel")) %>% dplyr::select(cluster_id = id.x,cluster_name = id.y)
anno_df = neuron_map_seurat@misc$pruned_edgelist %>% dplyr::select(cluster_id = to, clusterlevel = clusterlevel,ncells ) %>% dplyr::left_join(both_map,by="cluster_id")
anno_df$first_cluster_name = sapply(anno_df$cluster_name,function(x){strsplit(x,"\\.")[[1]][length(strsplit(x,"\\.")[[1]])]})
}else{
# check that provided anno_df is valid:
if(length(setdiff(c("cluster_id","clusterlevel","cluster_name","first_cluster_name"),colnames(anno_df)))>0){
stop("Wrong anno_df format. Required columns: cluster_id, clusterlevel, cluster_name, first_cluster_name")
}
}
# if a heatmap matrix is provided, this function tries to infer the leaflevel based on the matrix
if(!is.null(heatmap_matrix) & is.null(leaf_level)){
# TODO
}
# reduce edgelist to certain level and from and to cols
edgelist$level = as.numeric(edgelist$level)
edgelist = edgelist[edgelist$level<=as.numeric(leaf_level),1:2]
## convert to treedata
# only take
tree_data_igraph = igraph::graph_from_edgelist(as.matrix(edgelist))
tree_data_phylo = treeio::as.phylo(tree_data_igraph)
tree_data_tibble <- dplyr::as_tibble(tree_data_phylo)
## convert to treedata
# only take
tree_data_igraph = suppressWarnings(igraph::graph_from_edgelist(as.matrix(edgelist)))
tree_data_phylo = treeio::as.phylo(tree_data_igraph)
tree_data_tibble <- dplyr::as_tibble(tree_data_phylo)
# add labels from annotation_df
tree_data_tibble = dplyr::left_join(tree_data_tibble,anno_df,by=c("label"="cluster_id"))
# update additional columns
tree_data_tibble$first_cluster_name[is.na(tree_data_tibble$first_cluster_name)]=""
# update additional columns
tree_data_tibble$first_cluster_name[is.na(tree_data_tibble$first_cluster_name)]=""
tree_data_tibble$nodesize = 1 # default node size
tree_data_tibble$n_children = sapply(tree_data_tibble$label,function(x,el){length(el$to[el$from==x])},el=edgelist) # count children number
tree_data_tibble$n_siblings = sapply(tree_data_tibble$label,function(x,el){ # count siblings
parent = el$from[el$to==x]
return(length(el$to[el$from==parent])-1)
},el=edgelist)
tree_data_tibble$tip.label =NA
tree_data_tibble$tip.label[tree_data_tibble$n_children==0] = tree_data_tibble$node[tree_data_tibble$n_children==0] # add tip labels if leaf
tree_data_tibble$first_cluster_name[ tree_data_tibble$n_children<2 & is.na(tree_data_tibble$tip.label)] = "" # if only one child node: changeto ""
# convert back to treedata
tree_data = suppressWarnings(tidytree::as.treedata(tree_data_tibble))
#plot circular tree
circular_tree =ggtree::ggtree(tree_data, layout = 'circular', branch.length='none')+
# geom_text(aes(label=first_cluster_name))
ggtree::geom_nodelab(aes(x=branch, label=first_cluster_name), size=label_size,vjust=-.5, color="darkred")+
ggtree::geom_tiplab(aes(x=branch, label=first_cluster_name), size=label_size,vjust=-.5,color="darkred")+
ggtree::geom_nodepoint(aes(subset = n_children > 1))#+geom_tippoint()
library(ggtree)
#plot circular tree
circular_tree =ggtree::ggtree(tree_data, layout = 'circular', branch.length='none')+
# geom_text(aes(label=first_cluster_name))
ggtree::geom_nodelab(aes(x=branch, label=first_cluster_name), size=label_size,vjust=-.5, color="darkred")+
ggtree::geom_tiplab(aes(x=branch, label=first_cluster_name), size=label_size,vjust=-.5,color="darkred")+
ggtree::geom_nodepoint(aes(subset = n_children > 1))#+geom_tippoint()
detach("package:ggtree", unload = TRUE)
library(ggtree)
