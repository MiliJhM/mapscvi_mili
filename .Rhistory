over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
#
a1=sapply(1:nrow(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,norm_counts,predicted_cluster,marker_dataframe){
print(i)
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe)
i=132
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
predicted_cluster[i]
predicted_cluster
nrow(query_paul_neurons@assays$RNA@data)
#
a1=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,norm_counts,predicted_cluster,marker_dataframe){
print(i)
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe)
?sapply
#
a1=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
View(marker_gene_stats_percell)
## some other criteria to flag ? or flag based on marker statistic ---> new quality metric?
query_paul_neurons@meta.data = dplyr::left_join(query_paul_neurons@meta.data,marker_gene_stats_percell,by="Cell_ID")
rownames(query_paul_neurons@meta.data) = query_paul_neurons@meta.data$Cell_ID
a4=query_paul_neurons@meta.data
#query_paul_neurons = map_new_seurat_hypoMap(query_paul_full,suffix="query_paul",subset_col = "predicted_Curated_Class",subset_values = c("Neurons","Mural"),label_col="K169_named",max_epochs=20,reference_seurat=neuron_map_seurat)
query_paul_neurons = map_new_seurat_hypoMap(query_paul_full,suffix="query_paul",subset_col = "",label_col="K169_named",max_epochs=20,reference_seurat=neuron_map_seurat)
query_paul_neurons = check_quality(query_seurat_object=query_paul_neurons,reference_seurat=reference_hypoMap,reduction_name="scvi",k_param=30)
## flag all that are strange from full map
query_paul_neurons@meta.data$problematic_flag = FALSE
query_paul_neurons@meta.data$problematic_flag[query_paul_neurons@meta.data$predicted_Curated_Class!="Neurons" & query_paul_neurons@meta.data$query_neighbor_oct > 0.3] = TRUE
## flag two major clusters
query_paul_neurons@meta.data$problematic_flag[query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10")] = TRUE
## make output for each cell: how many of the neuron_map cluster markers are expressed in that cell (mapped cluster)
# also save top expressed markers as relevant information!
marker_dataframe = neuron_map_seurat@misc$markers_comparisons_all[neuron_map_seurat@misc$markers_comparisons_all$p_val_adj<0.001 & neuron_map_seurat@misc$markers_comparisons_all$specificity>0.5,]
marker_dataframe = dplyr::left_join(marker_dataframe,anno_df %>% dplyr::select(cluster_name =Map_CellType,cluster_id), by=c("cluster_1"="cluster_id"))
marker_dataframe = marker_dataframe %>% dplyr::filter(cluster_name %in% query_paul_neurons@meta.data$predicted)
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
## some other criteria to flag ? or flag based on marker statistic ---> new quality metric?
query_paul_neurons@meta.data = dplyr::left_join(query_paul_neurons@meta.data,marker_gene_stats_percell,by="Cell_ID")
rownames(query_paul_neurons@meta.data) = query_paul_neurons@meta.data$Cell_ID
a5=query_paul_neurons@meta.data
View(a5)
query_paul_neurons@meta.data$problematic_flag[query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1] = TRUE
a5=query_paul_neurons@meta.data
View(a5)
## reduce to cells that actually express markers and are not flagged
query_paul_neurons_successfull = subset(query_paul_neurons,subset= problematic_flag==FALSE)
## make samll overview
plot_query_labels(query_seura_object=query_paul_neurons_successfull,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = TRUE,label.size=2)
table(query_paul_neurons_successfull@meta.data$predicted)
sort(table(query_paul_neurons_successfull@meta.data$predicted),decreasing = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Pmch",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Parbp",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Parpbp",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Fkbp11",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Igfbp3",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Wipi1",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Vgll2",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Hcrt",order = TRUE)
predicted_cluster
# check markers over all cells and calculate zscore
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
predicted_cluster==predicted_cluster[i]
predicted_cluster
predicted_cluster[i]
i=2
predicted_cluster==predicted_cluster[i]
colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
# check markers over all cells and calculate zscore
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
exclude_cells
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,exclude_same_predicted=TRUE,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
if(exclude_same_predicted){
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
}else{
over_all = as.matrix(norm_counts[cluster_markers,])
}
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,i]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,exclude_same_predicted=TRUE,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
if(exclude_same_predicted){
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
}else{
over_all = as.matrix(norm_counts[cluster_markers,])
}
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
View(marker_gene_stats_percell)
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,exclude_same_predicted=TRUE,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
if(exclude_same_predicted){
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
print(exclude_cells)
}else{
over_all = as.matrix(norm_counts[cluster_markers,])
}
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:10]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
View(marker_gene_stats_percell)
predicted_cluster
i=13
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
cluster_markers_expression
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
sort(cluster_markers_expression,decreasing = TRUE)
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
View(over_all)
print(exclude_cells)
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
zscore_of_cell
sort(zscore_of_cell)
over_all = as.matrix(norm_counts[cluster_markers,])
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
sort(zscore_of_cell)
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,exclude_same_predicted=F,markers_n=20,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
if(exclude_same_predicted){
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
print(exclude_cells)
}else{
over_all = as.matrix(norm_counts[cluster_markers,])
}
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>10){top_markers=top_markers[1:markers_n]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
colnames(query_paul_neurons@meta.data)
query_paul_neurons@meta.data=query_paul_neurons@meta.data[,1:21]
## some other criteria to flag ? or flag based on marker statistic ---> new quality metric?
query_paul_neurons@meta.data = dplyr::left_join(query_paul_neurons@meta.data,marker_gene_stats_percell,by="Cell_ID")
rownames(query_paul_neurons@meta.data) = query_paul_neurons@meta.data$Cell_ID
query_paul_neurons@meta.data$problematic_flag[query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1] = TRUE
## reduce to cells that actually express markers and are not flagged
query_paul_neurons_successfull = subset(query_paul_neurons,subset= problematic_flag==FALSE)
sort(table(query_paul_neurons_successfull@meta.data$predicted),decreasing = TRUE)
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc32a1.Hmx2.Hmx3.Crh"]
#
marker_gene_stats_percell=sapply(1:ncol(query_paul_neurons@assays$RNA@data),function(i,min_norm_expr=0.01,min_zscore=2,exclude_same_predicted=F,markers_n=20,norm_counts,predicted_cluster,marker_dataframe){
# get cluster markers
cluster_markers = unique(marker_dataframe$gene[marker_dataframe$cluster_name == predicted_cluster[i]])
cluster_markers = intersect(cluster_markers,rownames(norm_counts))
# get expression of cluster markers
cluster_markers_expression = norm_counts[cluster_markers,i]
cluster_markers_expression[cluster_markers_expression<min_norm_expr] = 0
cluster_markers_expression[cluster_markers_expression>=min_norm_expr] = 1
# how many markers are expresse by cell
pct_markers_expressed = sum(cluster_markers_expression) / length(cluster_markers)
# check markers over all cells and calculate zscore
if(exclude_same_predicted){
exclude_cells = colnames(norm_counts)[predicted_cluster==predicted_cluster[i]]
exclude_cells=exclude_cells[exclude_cells!=colnames(norm_counts)[i]]
over_all = as.matrix(norm_counts[cluster_markers,!colnames(norm_counts) %in% exclude_cells])
print(exclude_cells)
}else{
over_all = as.matrix(norm_counts[cluster_markers,])
}
over_all_zscore = t(apply(over_all,1,function(x){return((x-mean(x)) / (sd(x)))}))
zscore_of_cell =over_all_zscore[,colnames(norm_counts)[i]]
# how many markers have high zscore in cell
pct_markers_enriched =length(which(zscore_of_cell>min_zscore)) / length(cluster_markers)
# get top marker genes
top_markers = names(sort(zscore_of_cell[zscore_of_cell>min_zscore],decreasing = TRUE))
if(length(top_markers)>markers_n){top_markers=top_markers[1:markers_n]}
# return result
entry = data.frame(Cell_ID = colnames(norm_counts)[i],pct_markers_expressed,pct_markers_enriched,top_markers=paste0(top_markers,collapse = "|"))
entry
},norm_counts = query_paul_neurons@assays$RNA@data,predicted_cluster=query_paul_neurons@meta.data$predicted,marker_dataframe=marker_dataframe,simplify=FALSE)
marker_gene_stats_percell = do.call(rbind,marker_gene_stats_percell)
query_paul_neurons@meta.data=query_paul_neurons@meta.data[,1:21]
## some other criteria to flag ? or flag based on marker statistic ---> new quality metric?
query_paul_neurons@meta.data = dplyr::left_join(query_paul_neurons@meta.data,marker_gene_stats_percell,by="Cell_ID")
rownames(query_paul_neurons@meta.data) = query_paul_neurons@meta.data$Cell_ID
query_paul_neurons@meta.data$problematic_flag[query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1] = TRUE
## reduce to cells that actually express markers and are not flagged
query_paul_neurons_successfull = subset(query_paul_neurons,subset= problematic_flag==FALSE)
sort(table(query_paul_neurons_successfull@meta.data$predicted),decreasing = TRUE)
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc32a1.Hmx2.Hmx3.Crh"]
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc17a6.Nrn1.Sim1.Ebf3.Gpr50"]
FeaturePlot(query_paul_neurons_successfull,features = "Serpini1",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Penk",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Bdnf",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Ctxn2",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Slc17a6",order = TRUE)
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc17a6.Nrn1.Sim1.Trh"]
FeaturePlot(query_paul_neurons_successfull,features = "Adcy2",order = TRUE)
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc32a1.Otp.Npy.Agrp.Gm8773"]
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc32a1.Hmx2.Six3.Pthlh.Il1rapl2"]
FeaturePlot(query_paul_neurons_successfull,features = "Pthlh",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Slc8a2",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Otp",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Tmem132e",order = TRUE)
sort(table(query_paul_neurons_successfull@meta.data$predicted),decreasing = TRUE)
query_paul_neurons_successfull@meta.data$top_markers[query_paul_neurons_successfull$predicted=="Slc32a1.Arx.Gad2.Sp9.Prkcd"]
FeaturePlot(query_paul_neurons_successfull,features = "Gfra1",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Nrgn",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Zic4",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Gnai1",order = TRUE)
FeaturePlot(query_paul_neurons_successfull,features = "Hs3st2",order = TRUE)
## plot
plot_query_labels(query_seura_object=query_paul_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = TRUE,label.size=2)
## plot
plot_query_labels(query_seura_object=query_paul_neurons,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = F,label.size=2)
## plot
plot_query_labels(query_seura_object=query_paul_full,reference_seurat=full_map_seurat,label_col="Curated_Class",overlay = TRUE,
query_pt_size = 0.4,labelonplot = TRUE,label.size=2,raster=FALSE)
query_paul_full
length(which([query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10")))
length(which([query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10")]))
length(which([query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10"),]))
length(which(query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10")))
which(query_paul_neurons@meta.data$predicted_Curated_Class!="Neurons" & query_paul_neurons@meta.data$query_neighbor_oct > 0.3)
length(which(query_paul_neurons@meta.data$predicted_Curated_Class!="Neurons" & query_paul_neurons@meta.data$query_neighbor_oct > 0.3))
length(which(query_paul_neurons@meta.data$predicted_Curated_Class!="Neurons" & query_paul_neurons@meta.data$query_neighbor_oct > 0.3 & (query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10")))
)
length(which(query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1))
length(which(query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1 &))
length(which(query_paul_neurons@meta.data$pct_markers_expressed<0.4 | query_paul_neurons@meta.data$pct_markers_enriched < 0.1 & (query_paul_neurons@meta.data$predicted_Curated_Class!="Neurons" & query_paul_neurons@meta.data$query_neighbor_oct > 0.3 & (query_paul_neurons@meta.data$predicted %in% c("Slc17a6.Foxb1.Pitx2.Sepp1.Mobp","Slc17a6.Foxb1.Pitx2.Sepp1.Slc7a10"))))
)
table(query_paul_neurons@meta.data$problematic_flag)
colnames(query_paul_neurons@meta.data)
# show marker pct
FeaturePlot(query_paul_neurons_successfull,features = "pct_markers_enriched",order = TRUE)
# show marker pct
FeaturePlot(query_paul_neurons,features = "pct_markers_enriched",order = TRUE)
a4=query_paul_neurons@meta.data
View(a4)
FeaturePlot(query_paul_neurons,features = "pct_markers_expressed",order = TRUE)
## make samll overview
plot_query_labels(query_seura_object=query_paul_neurons_successfull,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = TRUE,label.size=2)
## make samll overview
plot_query_labels(query_seura_object=query_paul_neurons_successfull,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 0.4,labelonplot = F,label.size=2)
## make samll overview
plot_query_labels(query_seura_object=query_paul_neurons_successfull,reference_seurat=neuron_map_seurat,label_col="K169_named",overlay = TRUE,query_pt_size = 1,labelonplot = F,label.size=2)
sort(table(query_paul_neurons_successfull@meta.data$predicted),decreasing = TRUE)
write.table(as.data.frame(table(query_paul_neurons_successfull@meta.data$predicted))%>% dplyr::arrange(desc(n)))
write.table(as.data.frame(table(query_paul_neurons_successfull@meta.data$predicted)))
write.table(as.data.frame(table(query_paul_neurons_successfull@meta.data$predicted))%>% dplyr::arrange(desc(freq_batch)),row.names = F,quote = F)
write.table(as.data.frame(table(query_paul_neurons_successfull@meta.data$predicted))%>% dplyr::arrange(desc(Freq)),row.names = F,quote = F)
colnames(query_paul_neurons@meta.data)
#
preliminary_cell_assignment = query_paul_neurons@meta.data(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,pct_markers_expressed,nFeature_RNA,nCount_RNA,pct_markers_enriched,top_markers)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,pct_markers_expressed,nFeature_RNA,nCount_RNA,pct_markers_enriched,top_markers)
View(preliminary_cell_assignment)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressedA,pct_markers_enriched,top_markers)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(problematic_flag)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(passes_all_QC)
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,passes_all_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(desc(passes_all_QC))
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,failed_mapping_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(desc(passes_all_QC))
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,failed_mapping_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(desc(failed_mapping_QC))
#
preliminary_cell_assignment = query_paul_neurons@meta.data %>% dplyr::select(Cell_ID,failed_mapping_QC = problematic_flag,predicted_neuron_cluster = predicted,predicted_Curated_Class,nFeature_RNA,nCount_RNA,pct_markers_expressed,pct_markers_enriched,top_markers) %>%
dplyr::arrange(failed_mapping_QC)
# table with sc-seq markers
sc_seq_marker_genes = marker_dataframe[marker_dataframe$specificity > 1 & marker_dataframe$cluster_name %in% preliminary_cell_assignment$predicted_neuron_cluster[!preliminary_cell_assignment$failed_mapping_QC],]
View(sc_seq_marker_genes)
colnames(sc_seq_marker_genes)
# table with sc-seq markers
sc_seq_marker_genes = marker_dataframe[marker_dataframe$specificity > 1 & marker_dataframe$cluster_name %in% preliminary_cell_assignment$predicted_neuron_cluster[!preliminary_cell_assignment$failed_mapping_QC],] %>%
dplyr::select(cluster_name,cluster_id = cluster_1,gene,p_val_adj,avg_logFC,pct.1,pct.2,specificity)
View(sc_seq_marker_genes)
# table with sc-seq markers
sc_seq_marker_genes = marker_dataframe[marker_dataframe$specificity > 1 & marker_dataframe$cluster_name %in% preliminary_cell_assignment$predicted_neuron_cluster[!preliminary_cell_assignment$failed_mapping_QC],] %>%
dplyr::select(cluster_name,cluster_id = cluster_1,gene,p_val_adj,avg_logFC,pct.1,pct.2,specificity) %>% dplyr::arrange(desc(specificity))
# table with sc-seq markers
sc_seq_marker_genes = marker_dataframe[marker_dataframe$specificity > 1 & marker_dataframe$cluster_name %in% preliminary_cell_assignment$predicted_neuron_cluster[!preliminary_cell_assignment$failed_mapping_QC],] %>%
dplyr::select(cluster_name,cluster_id = cluster_1,gene,p_val_adj,avg_logFC,pct.1,pct.2,specificity) %>% dplyr::arrange(cluster_id,desc(specificity))
data.table::fwrite(preliminary_cell_assignment,paste0(file_path,"preliminary_cell_assignment.csv"),sep=",")
data.table::fwrite(sc_seq_marker_genes,paste0(file_path,"sc_seq_marker_genes.csv"),sep=",")
library(devtools)
load_all()
document()
install()
devtools::install()
